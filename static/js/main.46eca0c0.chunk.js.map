{"version":3,"sources":["bcphelpers.ts","uielements.tsx","interprete.ts","displays.tsx","settings.ts","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","padStart","replace","concat","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","Math","pow","join","ellideMiddle","str","maxOutLen","length","frontLen","ceil","tailLen","floor","addressLink","address","react_default","a","createElement","Link","to","printEllideMiddle","title","InputProperties","fromHex","Encoding","toHex","priorityEd25519PubkeyDisplay","prioritySecp256k1PubkeyDisplay","priorityEd25519PivkeyDisplay","priorityHdAddressesDisplay","priorityLiskLikePassphraseDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityEthereumAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAccountDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","mark","_callee","connection","response","names","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","getUsernames","owner","abrupt","account","stop","apply","this","renderData","data","_response$account","pubkey","balance","hexPubkey","nameElements","key","className","makeBnsAccountDisplayImpl","makeLiskAccountDisplay","_getData2","_callee2","_context2","LiskConnection","makeRiseAccountDisplay","_getData3","_callee3","_context3","RiseConnection","makeBnsUsernameDisplay","displayId","_getData4","_callee4","_context4","username","_response$","addressElements","targets","pair","chainId","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEthereumAddressDisplay","lower","checksummed","toChecksummedAddress","href","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","iovTestAddress","pubkeyToAddress","iovMainAddress","liskAddress","Derivation","riseAddress","makeSecp256k1PubkeyDisplay","Secp256k1","ethereumAddress","ethereumPubkeyToAddress","makeEd25519PrivkeyDisplay","seed","makeHdAddressesDisplay","addresses","addressLength","rows","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee5","wallet","index","identity","_context5","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","bnsCodec","identityToAddress","push","makeEd25519HdWalletDisplay","_x2","_x3","_makeEd25519HdWalletDisplay","_callee6","coin","coinNumber","coinName","codec","_context6","number","Slip10RawIndex","hardened","makeSecp256k1HdWalletDisplay","_x4","_x5","_makeSecp256k1HdWalletDisplay","_callee7","_context7","Secp256k1HdWallet","normal","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee8","_context8","t0","passphraseToKeypair","t1","call","t2","t3","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","ByteLength64","ByteLength65","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsUsername","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","ethereumCodec","EthereumAddress","iovTestnets","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","secp256k1Slip10HdCoins","isInteractiveDisplay","display","processInput","_processInput","normalizedInput","properties","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","hdCoin","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_hdCoin","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_network2","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_network3","trim","Array","Symbol","iterator","done","value","return","finish","t4","t5","t6","t7","t8","t9","t10","t11","startsWith","t12","t13","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","filter","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.46eca0c0.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = (amount.quantity.slice(-amount.fractionalDigits) || \"0\").padStart(\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: readonly Slip10RawIndex[]): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import { Address } from \"@iov/bcp\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  /* eslint-disable no-shadow */\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  ByteLength64,\n  ByteLength65,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  LiskAddress,\n  RiseAddress,\n  /* eslint-enable no-shadow */\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set<InputProperties>();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) out.add(InputProperties.ByteLength20);\n    if (rawData.length === 32) out.add(InputProperties.ByteLength32);\n    if (rawData.length === 64) out.add(InputProperties.ByteLength64);\n    if (rawData.length === 65) out.add(InputProperties.ByteLength65);\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // TODO: update min length to 3 starting with weave 0.21\n  if (input.match(/^[a-z0-9.\\-_]{1,64}\\*iov$/)) {\n    out.add(InputProperties.BnsUsername);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  return out;\n}\n","import {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  ChainId,\n  PubkeyBundle,\n  PubkeyBytes,\n} from \"@iov/bcp\";\nimport { bnsCodec, BnsConnection, BnsUsernameNft, pubkeyToAddress } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { pubkeyToAddress as ethereumPubkeyToAddress, toChecksummedAddress } from \"@iov/ethereum\";\nimport { Ed25519HdWallet, HdPaths, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport { LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { RiseConnection } from \"@iov/rise\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printAmount, printPath } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { HdCoin, NetworkSettings } from \"./settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { fromHex, toHex } = Encoding;\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst prioritySecp256k1PubkeyDisplay = 7;\nconst priorityEd25519PivkeyDisplay = 7;\nconst priorityHdAddressesDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityEthereumAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameDisplay = 15;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplayImpl(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      if (response) {\n        const names = await connection.getUsernames({ owner: response.address });\n        return {\n          account: response,\n          names: names,\n        };\n      } else {\n        return undefined;\n      }\n    },\n    renderData: (\n      response: { readonly account: Account; readonly names: readonly BnsUsernameNft[] } | undefined,\n    ) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response.account;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n\n        const nameElements = response.names.map(name => (\n          <span key={name.id}>\n            <Link to={\"#\" + name.id}>{ellideMiddle(name.id, 40)}</Link>\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n              <tr>\n                <td>Names</td>\n                <td>{nameElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return makeBnsAccountDisplayImpl(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username`;\n  const interpretedAs = `Username on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: readonly BnsUsernameNft[]) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, targets } = response[0];\n        const addressElements = targets.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Username not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorityEthereumAddressDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const iovTestAddress = pubkeyToAddress(pubkey, \"tiov\");\n  const iovMainAddress = pubkeyToAddress(pubkey, \"iov\");\n  const liskAddress = Derivation.pubkeyToAddress(pubkey.data, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(pubkey.data, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        IOV main: <Link to={\"#\" + iovMainAddress}>{iovMainAddress}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + iovTestAddress}>{iovTestAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeSecp256k1PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Secp256k1,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const ethereumAddress = ethereumPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#secp256k1-pubkey`,\n    interpretedAs: \"Secp256k1 public key\",\n    priority: prioritySecp256k1PubkeyDisplay,\n    data: (\n      <div>\n        Ethereum: <Link to={\"#\" + ethereumAddress}>{ethereumAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PrivkeyDisplay(input: string): StaticDisplay {\n  const seed = fromHex(input).slice(0, 32);\n  const pubkey = fromHex(input).slice(32, 64) as PubkeyBytes;\n\n  return {\n    id: `${input}#ed25519-privkey`,\n    interpretedAs: \"Ed25519 private key (libsodium format)\",\n    priority: priorityEd25519PivkeyDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Seed:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(seed)}</div>\n        </div>\n        <div>\n          Pubkey: <Link to={\"#\" + toHex(pubkey)}>{printEllideMiddle(toHex(pubkey), 40)}</Link>\n        </div>\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: readonly {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[],\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // any testnet leads to \"tiov\" prefixes\n  const chainId = \"some-testnet\" as ChainId;\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = bnsCodec.identityToAddress(identity);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-simple-address`,\n    `Simple Address HD Wallet`,\n    addresses,\n    21,\n    true,\n  );\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovChainIds = {\n  testnet: \"iov-lovenet\" as ChainId, // Any testnet is okay here. Used for address calculation only\n  mainnet: \"iov-mainnet\" as ChainId,\n};\n\nconst iovDevnets: readonly NetworkSettings[] =\n  process.env.NODE_ENV === \"development\"\n    ? [\n        {\n          name: \"Devnet\",\n          url: \"http://localhost:23456/\",\n        },\n      ]\n    : [];\n\nexport const iovTestnets: readonly NetworkSettings[] = [\n  {\n    name: \"Babynet 👶\",\n    url: \"https://rpc-private-a-vip-babynet.iov.one\",\n  },\n  {\n    name: \"Catnet 🐈\",\n    url: \"https://rpc-private-a-vip-catnet.iov.one\",\n  },\n  {\n    name: \"Boarnet 🐗\",\n    url: \"https://rpc.boarnet.iov.one\",\n  },\n  {\n    name: \"Lovenet 😍\",\n    url: \"https://rpc.lovenet.iov.one\",\n  },\n  ...iovDevnets,\n];\n\nexport const liskNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const riseNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAccountDisplay,\n  makeBnsUsernameDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAccountDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSecp256k1PubkeyDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovTestnets,\n  liskNetworks,\n  riseNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport async function processInput(input: string): Promise<readonly Display[]> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsUsernameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength64)) {\n      out.push(makeEd25519PrivkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength65) && normalizedInput.startsWith(\"04\")) {\n      out.push(makeSecp256k1PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: readonly StaticDisplay[];\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  public constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = (): void => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}