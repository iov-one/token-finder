{"version":3,"sources":["bcphelpers.ts","settings.ts","uielements.tsx","interprete.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","padStart","replace","concat","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","Math","pow","join","iovChainIds","testnet","mainnet","iovTestnets","name","url","bnsUsernameSupported","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","chainId","codec","bnsCodec","liskCodec","riseCodec","secp256k1Slip10HdCoins","ethereumCodec","ellideMiddle","str","maxOutLen","length","frontLen","ceil","tailLen","floor","addressLink","address","react_default","a","createElement","Link","to","printEllideMiddle","title","InputProperties","fromHex","Encoding","toHex","priorityEd25519PubkeyDisplay","priorityEd25519PivkeyDisplay","priorityHdAddressesDisplay","priorityLiskLikePassphraseDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityEthereumAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAddressDisplay","input","network","id","interpretedAs","priority","query","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","mark","_callee","connection","response","names","wrap","_context","prev","next","has","set","BnsConnection","establish","get","sent","getAccount","getUsernames","owner","abrupt","account","stop","apply","this","renderData","data","_response$account","pubkey","balance","hexPubkey","nameElements","key","className","makeBnsAccountDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","makeBnsUsernameDisplay","displayId","_getData4","_callee4","_context4","username","_response$","addressElements","targets","pair","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEthereumAddressDisplay","lower","checksummed","toChecksummedAddress","href","makeEd25519PubkeyDisplay","ed25519PubkeyBytes","iovTestAddress","identityToAddress","algo","Algorithm","Ed25519","iovMainAddress","liskAddress","Derivation","pubkeyToAddress","riseAddress","makeEd25519PrivkeyDisplay","seed","makeHdAddressesDisplay","addresses","addressLength","rows","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee5","wallet","index","identity","_context5","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","push","makeEd25519HdWalletDisplay","_x2","_x3","_makeEd25519HdWalletDisplay","_callee6","coin","coinNumber","coinName","_context6","Slip10RawIndex","hardened","makeSecp256k1HdWalletDisplay","_x4","_x5","_makeSecp256k1HdWalletDisplay","_callee7","_context7","Secp256k1HdWallet","normal","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee8","_context8","t0","passphraseToKeypair","t1","call","t2","t3","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","ByteLength64","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsUsername","isValidAddress","LiskAddress","RiseAddress","EthereumAddress","isInteractiveDisplay","display","processInput","_processInput","normalizedInput","properties","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","hdCoin","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_hdCoin","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_network2","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_network3","trim","Array","Symbol","iterator","done","value","return","finish","filter","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.6d0aa795.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = (amount.quantity.slice(-amount.fractionalDigits) || \"0\").padStart(\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: readonly Slip10RawIndex[]): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n  readonly bnsUsernameSupported?: boolean;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovChainIds = {\n  testnet: \"iov-lovenet\" as ChainId, // Any testnet is okay here. Used for address calculation only\n  mainnet: \"iov-mainnet\" as ChainId,\n};\n\nexport const iovTestnets: readonly NetworkSettings[] = [\n  {\n    name: \"Lovenet (bnsd)\",\n    url: \"https://rpc.lovenet.iov.one\",\n    bnsUsernameSupported: true,\n  },\n];\n\nexport const liskNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const riseNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import { Address } from \"@iov/bcp\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  /* eslint-disable no-shadow */\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  ByteLength64,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  LiskAddress,\n  RiseAddress,\n  /* eslint-enable no-shadow */\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set<InputProperties>();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n    if (rawData.length === 64) {\n      out.add(InputProperties.ByteLength64);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // TODO: update min length to 3 starting with weave 0.21\n  if (input.match(/^[a-z0-9.\\-_]{1,64}\\*iov$/)) {\n    out.add(InputProperties.BnsUsername);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  return out;\n}\n","import {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  ChainId,\n  PubkeyBundle,\n  PubkeyBytes,\n} from \"@iov/bcp\";\nimport { bnsCodec, BnsConnection, BnsUsernameNft } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { toChecksummedAddress } from \"@iov/ethereum\";\nimport { Ed25519HdWallet, HdPaths, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport { LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { RiseConnection } from \"@iov/rise\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printAmount, printPath } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { HdCoin, iovChainIds, NetworkSettings } from \"./settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { fromHex, toHex } = Encoding;\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst priorityEd25519PivkeyDisplay = 7;\nconst priorityHdAddressesDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityEthereumAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameDisplay = 15;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      if (response) {\n        const names = await connection.getUsernames({ owner: response.address });\n        return {\n          account: response,\n          names: names,\n        };\n      } else {\n        return undefined;\n      }\n    },\n    renderData: (\n      response: { readonly account: Account; readonly names: readonly BnsUsernameNft[] } | undefined,\n    ) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response.account;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n\n        const nameElements = response.names.map(name => (\n          <span key={name.id}>\n            <Link to={\"#\" + name.id}>{ellideMiddle(name.id, 40)}</Link>\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n              <tr>\n                <td>Names</td>\n                <td>{nameElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username`;\n  const interpretedAs = `Username on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: readonly BnsUsernameNft[]) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, targets } = response[0];\n        const addressElements = targets.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Username not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorityEthereumAddressDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const ed25519PubkeyBytes = Encoding.fromHex(input) as PubkeyBytes;\n\n  const iovTestAddress = bnsCodec.identityToAddress({\n    chainId: iovChainIds.testnet,\n    pubkey: { algo: Algorithm.Ed25519, data: ed25519PubkeyBytes },\n  });\n  const iovMainAddress = bnsCodec.identityToAddress({\n    chainId: iovChainIds.mainnet,\n    pubkey: { algo: Algorithm.Ed25519, data: ed25519PubkeyBytes },\n  });\n  const liskAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        IOV main: <Link to={\"#\" + iovMainAddress}>{iovMainAddress}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + iovTestAddress}>{iovTestAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PrivkeyDisplay(input: string): StaticDisplay {\n  const seed = fromHex(input).slice(0, 32);\n  const pubkey = fromHex(input).slice(32, 64) as PubkeyBytes;\n\n  return {\n    id: `${input}#ed25519-privkey`,\n    interpretedAs: \"Ed25519 private key (libsodium format)\",\n    priority: priorityEd25519PivkeyDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Seed:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(seed)}</div>\n        </div>\n        <div>\n          Pubkey: <Link to={\"#\" + toHex(pubkey)}>{printEllideMiddle(toHex(pubkey), 40)}</Link>\n        </div>\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: readonly {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[],\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // any testnet leads to \"tiov\" prefixes\n  const chainId = \"some-testnet\" as ChainId;\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = bnsCodec.identityToAddress(identity);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-simple-address`,\n    `Simple Address HD Wallet`,\n    addresses,\n    21,\n    true,\n  );\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsUsernameDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovTestnets,\n  liskNetworks,\n  riseNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport async function processInput(input: string): Promise<readonly Display[]> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsUsernameSupported)) {\n      out.push(makeBnsUsernameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength64)) {\n      out.push(makeEd25519PrivkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: readonly StaticDisplay[];\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  public constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = (): void => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}