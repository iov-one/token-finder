{"version":3,"sources":["bcphelpers.ts","uielements.tsx","displays/rest.tsx","displays/hdwallet.tsx","interprete.ts","settings.ts","displays/weaveCondition.tsx","displays/weaveAddress.tsx","displays/weaveId.tsx","displays/index.ts","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","padStart","replace","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","join","ellideMiddle","str","maxOutLen","length","frontLen","Math","ceil","tailLen","floor","addressLink","address","Link","to","printEllideMiddle","title","fromHex","Encoding","toHex","bcpConnections","Map","bnsConnections","makeIovAccountDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","getData","a","async","has","url","set","BnsConnection","establish","get","connection","getAccount","response","getUsernames","owner","names","account","undefined","renderData","data","pubkey","balance","hexPubkey","nameElements","key","className","makeIovAccountDisplayImpl","priorities","bnsAddress","makeLiskAccountDisplay","liskAddress","LiskConnection","makeIovUsernameDisplay","displayId","bnsUsername","username","addressElements","targets","pair","chainId","makeBech32Display","parsed","Bech32","decode","bech32","prefix","makeHexDisplay","inputData","hex","toLowerCase","toUpperCase","makeEthereumAddressDisplay","lower","checksummed","toChecksummedAddress","ethereumAddress","href","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","iovTestAddress","bnsPubkeyToAddress","iovMainAddress","liskPubkeyToAddress","ed25519Pubkey","makeSecp256k1PubkeyDisplay","Secp256k1","ethereumPubkeyToAddress","secp256k1Pubkey","makeEd25519PrivkeyDisplay","seed","ed25519Pivkey","makeLiskLikePassphraseDisplay","passphraseToKeypair","liskLikePassphrase","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","bip39Mnemonic","makeHdAddressesDisplay","addresses","addressLength","rows","hdAddresses","makeEd25519HdWalletDisplay","coin","coinNumber","number","coinName","codec","wallet","Ed25519HdWallet","fromMnemonic","Slip10RawIndex","hardened","createIdentity","identity","identityToAddress","push","makeSecp256k1HdWalletDisplay","Secp256k1HdWallet","normal","InputProperties","weaveConditionRegex","bnsUsernameRegex","interprete","Set","out","value","Uint64","fromString","add","toString","NonZeroUint64","rawData","Hex","ByteLength20","ByteLength32","ByteLength64","ByteLength65","IovAddressMainnet","IovAddressTestnet","EnglishMnemonic12Words","match","BnsUsername","liskCodec","isValidAddress","LiskAddress","ethereumCodec","EthereumAddress","WeaveCondition","iovChainIds","testnet","mainnet","iovTestnets","iovMainnet","liskNetworks","accountBasedSlip10HdCoins","bnsCodec","secp256k1Slip10HdCoins","makeWeaveConditionDisplay","extension","type","hexData","condition","buildCondition","tiovAddress","conditionToAddress","iovAddress","weaveCondition","makeWeaveAddressDisplay","encode","weaveAddress","makeWeaveIdDisplay","idSuffix","toBytesBigEndian","conditionString","makeWeaveEscrowId","weaveEscrowId","makeWeaveGovernanceRuleId","weaveGovernanceRuleId","makeWeaveMultisigId","weaveMutltisigId","isInteractiveDisplay","display","compareByPriority","b","processInput","normalizedInput","trim","properties","Array","hdCoin","startsWith","sort","App","props","timeouts","state","history","listen","location","hashQuery","hash","decodeURIComponent","handleQuery","handleChange","bind","this","listItems","placeholder","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","console","log","updatedDisplay","list","x","index","findIndex","i","setState","allStatic","timeout","clearTimeout","setTimeout","interactiveDisplay","then","catch","error","rendered","updateDisplay","filter","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.d1812277.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = (amount.quantity.slice(-amount.fractionalDigits) || \"0\").padStart(\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: readonly Slip10RawIndex[]): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import { Address } from \"@iov/bcp\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  PubkeyBundle,\n  PubkeyBytes,\n} from \"@iov/bcp\";\nimport { BnsConnection, BnsUsernameNft, pubkeyToAddress as bnsPubkeyToAddress } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { pubkeyToAddress as ethereumPubkeyToAddress, toChecksummedAddress } from \"@iov/ethereum\";\nimport { LiskConnection, passphraseToKeypair, pubkeyToAddress as liskPubkeyToAddress } from \"@iov/lisk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printAmount } from \"../bcphelpers\";\nimport { NetworkSettings } from \"../settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"../uielements\";\nimport { InteractiveDisplay, priorities, StaticDisplay } from \".\";\n\nconst { fromHex, toHex } = Encoding;\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeIovAccountDisplayImpl(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      if (response) {\n        const names = await connection.getUsernames({ owner: response.address });\n        return {\n          account: response,\n          names: names,\n        };\n      } else {\n        return undefined;\n      }\n    },\n    renderData: (\n      response: { readonly account: Account; readonly names: readonly BnsUsernameNft[] } | undefined,\n    ) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response.account;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n\n        const nameElements = response.names.map(name => (\n          <span key={name.id}>\n            <Link to={\"#\" + name.id}>{ellideMiddle(name.id, 40)}</Link>\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n              <tr>\n                <td>Names</td>\n                <td>{nameElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeIovAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return makeIovAccountDisplayImpl(\n    id,\n    priorities.bnsAddress,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorities.liskAddress,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorities.liskAddress,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeIovUsernameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username`;\n  const interpretedAs = `Username on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorities.bnsUsername,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: readonly BnsUsernameNft[]) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, targets } = response[0];\n        const addressElements = targets.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Username not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorities.bnsUsername,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorities.bech32,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorities.hex,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorities.ethereumAddress,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const iovTestAddress = bnsPubkeyToAddress(pubkey, \"tiov\");\n  const iovMainAddress = bnsPubkeyToAddress(pubkey, \"iov\");\n  const liskAddress = liskPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorities.ed25519Pubkey,\n    data: (\n      <div>\n        IOV main: <Link to={\"#\" + iovMainAddress}>{iovMainAddress}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + iovTestAddress}>{iovTestAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeSecp256k1PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Secp256k1,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const ethereumAddress = ethereumPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#secp256k1-pubkey`,\n    interpretedAs: \"Secp256k1 public key\",\n    priority: priorities.secp256k1Pubkey,\n    data: (\n      <div>\n        Ethereum: <Link to={\"#\" + ethereumAddress}>{ethereumAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PrivkeyDisplay(input: string): StaticDisplay {\n  const seed = fromHex(input).slice(0, 32);\n  const pubkey = fromHex(input).slice(32, 64) as PubkeyBytes;\n\n  return {\n    id: `${input}#ed25519-privkey`,\n    interpretedAs: \"Ed25519 private key (libsodium format)\",\n    priority: priorities.ed25519Pivkey,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Seed:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(seed)}</div>\n        </div>\n        <div>\n          Pubkey: <Link to={\"#\" + toHex(pubkey)}>{printEllideMiddle(toHex(pubkey), 40)}</Link>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: (await passphraseToKeypair(input)).pubkey as PubkeyBytes,\n  };\n  const liskAddress = liskPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorities.liskLikePassphrase,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorities.bip39Mnemonic,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { Address, PubkeyBundle } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\nimport { Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printPath } from \"../bcphelpers\";\nimport { HdCoin } from \"../settings\";\nimport { ellideMiddle } from \"../uielements\";\nimport { priorities, StaticDisplay } from \".\";\n\nconst { toHex } = Encoding;\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: readonly {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[],\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorities.hdAddresses,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding, Uint64 } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\n\nexport enum InputProperties {\n  /* eslint-disable no-shadow */\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  ByteLength64,\n  ByteLength65,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  LiskAddress,\n  WeaveCondition,\n  Uint64,\n  NonZeroUint64,\n  /* eslint-enable no-shadow */\n}\n\nexport const weaveConditionRegex = /^cond:([a-zA-Z]+)\\/([a-zA-Z]+)\\/(([a-fA-F0-9]{2})+)$/;\nexport const bnsUsernameRegex = /^[a-z0-9.\\-_]{3,64}\\*iov$/;\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set<InputProperties>();\n\n  try {\n    const value = Uint64.fromString(input);\n    out.add(InputProperties.Uint64);\n    if (value.toString() !== \"0\") {\n      out.add(InputProperties.NonZeroUint64);\n    }\n  } catch {}\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) out.add(InputProperties.ByteLength20);\n    if (rawData.length === 32) out.add(InputProperties.ByteLength32);\n    if (rawData.length === 64) out.add(InputProperties.ByteLength64);\n    if (rawData.length === 65) out.add(InputProperties.ByteLength65);\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  if (input.match(bnsUsernameRegex)) {\n    out.add(InputProperties.BnsUsername);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  if (input.match(weaveConditionRegex)) {\n    out.add(InputProperties.WeaveCondition);\n  }\n\n  return out;\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovChainIds = {\n  testnet: \"iov-lovenet\" as ChainId, // Any testnet is okay here. Used for address calculation only\n  mainnet: \"iov-mainnet\" as ChainId,\n};\n\nconst iovDevnets: readonly NetworkSettings[] =\n  process.env.NODE_ENV === \"development\"\n    ? [\n        {\n          name: \"Devnet\",\n          url: \"http://localhost:23456/\",\n        },\n      ]\n    : [];\n\nexport const iovTestnets: readonly NetworkSettings[] = [\n  {\n    name: \"Dancenet 💃\",\n    url: \"https://rpc-private-a-x-dancenet.iov.one/\",\n  },\n  ...iovDevnets,\n];\n\nexport const iovMainnet: NetworkSettings = {\n  name: \"Mainnet\",\n  url: \"https://rpc-private-a-vip-mainnet.iov.one\",\n};\n\nexport const liskNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import { buildCondition, conditionToAddress } from \"@iov/bns\";\nimport { Encoding } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { weaveConditionRegex } from \"../interprete\";\nimport { iovChainIds } from \"../settings\";\nimport { priorities, StaticDisplay } from \".\";\n\nconst { fromHex, toHex } = Encoding;\n\nexport function makeWeaveConditionDisplay(input: string): StaticDisplay {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const match = input.match(weaveConditionRegex)!;\n  const [, extension, type, hexData] = match;\n  const data = fromHex(hexData);\n\n  const condition = buildCondition(extension, type, data);\n\n  const tiovAddress = conditionToAddress(iovChainIds.testnet, condition);\n  const iovAddress = conditionToAddress(iovChainIds.mainnet, condition);\n  return {\n    id: `${input}#weave-condition`,\n    interpretedAs: \"Weave condition\",\n    priority: priorities.weaveCondition,\n    data: (\n      <div>\n        Extension: {extension}\n        <br />\n        Type: {type}\n        <br />\n        Data: <Link to={\"#\" + toHex(data)}>{toHex(data)}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n","import { Bech32, Encoding } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { priorities, StaticDisplay } from \".\";\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorities.weaveAddress,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n","import { Encoding, Uint64 } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { priorities, StaticDisplay } from \".\";\n\nconst { toHex } = Encoding;\n\nfunction makeWeaveIdDisplay(\n  idSuffix: string,\n  interpretedAs: string,\n  priority: number,\n  extension: string,\n  type: string,\n  input: string,\n): StaticDisplay {\n  const data = Uint64.fromString(input).toBytesBigEndian();\n  const conditionString = `cond:${extension}/${type}/${toHex(data).toUpperCase()}`;\n  return {\n    id: `${input}#${idSuffix}`,\n    interpretedAs: interpretedAs,\n    priority: priority,\n    data: (\n      <div>\n        Condition: <Link to={\"#\" + conditionString}>{conditionString}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveEscrowId(input: string): StaticDisplay {\n  return makeWeaveIdDisplay(\n    \"weave-escrow-id\",\n    \"Weave escrow ID\",\n    priorities.weaveEscrowId,\n    \"escrow\",\n    \"seq\",\n    input,\n  );\n}\n\nexport function makeWeaveGovernanceRuleId(input: string): StaticDisplay {\n  return makeWeaveIdDisplay(\n    \"weave-governance-rule-id\",\n    \"Weave governance rule ID\",\n    priorities.weaveGovernanceRuleId,\n    \"gov\",\n    \"rule\",\n    input,\n  );\n}\n\nexport function makeWeaveMultisigId(input: string): StaticDisplay {\n  return makeWeaveIdDisplay(\n    \"weave-multisig-id\",\n    \"Weave multisignature ID\",\n    priorities.weaveMutltisigId,\n    \"multisig\",\n    \"usage\",\n    input,\n  );\n}\n","export {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeIovAccountDisplay,\n  makeIovUsernameDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeSecp256k1PubkeyDisplay,\n} from \"./rest\";\nexport { makeEd25519HdWalletDisplay, makeSecp256k1HdWalletDisplay } from \"./hdwallet\";\nexport { makeWeaveConditionDisplay } from \"./weaveCondition\";\nexport { makeWeaveAddressDisplay } from \"./weaveAddress\";\nexport { makeWeaveEscrowId, makeWeaveGovernanceRuleId, makeWeaveMultisigId } from \"./weaveId\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport const priorities = {\n  ed25519Pubkey: 7,\n  secp256k1Pubkey: 7,\n  ed25519Pivkey: 7,\n  hdAddresses: 7,\n  liskLikePassphrase: 8,\n  bnsAddress: 9,\n  liskAddress: 10,\n  bech32: 10,\n  weaveAddress: 10,\n  weaveCondition: 10,\n  weaveEscrowId: 10,\n  weaveGovernanceRuleId: 10,\n  weaveMutltisigId: 10,\n  ethereumAddress: 10,\n  bip39Mnemonic: 11,\n  bnsUsername: 15,\n  hex: 20,\n};\n","import {\n  Display,\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeIovAccountDisplay,\n  makeIovUsernameDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSecp256k1PubkeyDisplay,\n  makeWeaveAddressDisplay,\n  makeWeaveConditionDisplay,\n  makeWeaveEscrowId,\n  makeWeaveGovernanceRuleId,\n  makeWeaveMultisigId,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovMainnet,\n  iovTestnets,\n  liskNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nfunction compareByPriority(a: Display, b: Display): number {\n  return a.priority - b.priority;\n}\n\nexport async function processInput(input: string): Promise<readonly Display[]> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeIovAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.IovAddressMainnet)) {\n    out.push(makeIovAccountDisplay(normalizedInput, iovMainnet));\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    out.push(makeIovUsernameDisplay(normalizedInput, iovMainnet));\n    for (const network of iovTestnets) {\n      out.push(makeIovUsernameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength64)) {\n      out.push(makeEd25519PrivkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength65) && normalizedInput.startsWith(\"04\")) {\n      out.push(makeSecp256k1PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.WeaveCondition)) {\n    out.push(makeWeaveConditionDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.NonZeroUint64)) {\n    out.push(makeWeaveEscrowId(normalizedInput));\n    out.push(makeWeaveGovernanceRuleId(normalizedInput));\n    out.push(makeWeaveMultisigId(normalizedInput));\n  }\n\n  out.sort(compareByPriority);\n\n  return out;\n}\n","import \"./App.css\";\n\nimport { History } from \"history\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { isInteractiveDisplay, StaticDisplay } from \"./displays\";\nimport { processInput } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: History;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: readonly StaticDisplay[];\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  public constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      const query = decodeURIComponent(hashQuery);\n      this.handleQuery(query);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    // After some delay, push this input to browser history\n    this.timeouts.push(\n      setTimeout(() => {\n        const currentLocationHash = decodeURIComponent(this.props.location.hash.slice(1));\n        if (currentLocationHash !== newValue) {\n          this.props.history.push(`#${encodeURIComponent(newValue)}`);\n        }\n      }, 2500),\n    );\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = (): void => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}