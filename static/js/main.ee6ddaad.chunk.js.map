{"version":3,"sources":["bcphelpers.ts","uielements.tsx","interprete.ts","displays.tsx","settings.ts","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","Math","pow","join","ellideMiddle","str","maxOutLen","length","frontLen","ceil","tailLen","floor","addressLink","address","react_default","a","createElement","Link","to","InputProperties","toHex","Encoding","priorityEd25519PubkeyDisplay","priorityLiskLikePassphraseDisplay","priorityHdAddressesDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityEthereumAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameNftDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAddressDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","apply","this","renderData","data","pubkey","balance","hexPubkey","className","makeBnsAccountDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","makeBnsUsernameNftDisplay","displayId","_getData4","_callee4","_context4","getUsernames","username","_response$","owner","addressElements","addresses","pair","key","chainId","title","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","fromHex","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEthereumAddressDisplay","lower","checksummed","toChecksummedAddress","href","makeEd25519PubkeyDisplay","ed25519PubkeyBytes","bnsAddress","bnsCodec","identityToAddress","algo","Algorithm","Ed25519","liskAddress","Derivation","pubkeyToAddress","riseAddress","makeHdAddressesDisplay","addressLength","rows","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee5","wallet","index","identity","_context5","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","push","makeEd25519HdWalletDisplay","_x2","_x3","_makeEd25519HdWalletDisplay","_callee6","coin","coinNumber","coinName","codec","_context6","number","Slip10RawIndex","hardened","makeSecp256k1HdWalletDisplay","_x4","_x5","_makeSecp256k1HdWalletDisplay","_callee7","_context7","Secp256k1HdWallet","normal","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee8","_context8","t0","passphraseToKeypair","t1","call","t2","t3","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsUsernameNft","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","ethereumCodec","EthereumAddress","iovTestnets","bnsNftSupported","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","secp256k1Slip10HdCoins","isInteractiveDisplay","display","processInput","_processInput","normalizedInput","properties","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","hdCoin","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_hdCoin","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_network2","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_network3","trim","Array","Symbol","iterator","done","value","return","finish","filter","testnet","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.ee6ddaad.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\nimport leftPad from \"left-pad\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: ReadonlyArray<Slip10RawIndex>): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Address } from \"@iov/bcp\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsernameNft,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9.,+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsUsernameNft);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  return out;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  ChainId,\n  PublicKeyBundle,\n  PublicKeyBytes,\n} from \"@iov/bcp\";\nimport { bnsCodec, BnsConnection, BnsUsernameNft } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { toChecksummedAddress } from \"@iov/ethereum\";\nimport { Ed25519HdWallet, HdPaths, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport { LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { RiseConnection } from \"@iov/rise\";\n\nimport { printAmount, printPath } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { HdCoin, NetworkSettings } from \"./settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { toHex } = Encoding;\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 7;\nconst priorityHdAddressesDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityEthereumAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameNftDisplay = 15;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username-nft`;\n  const interpretedAs = `Username NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsUsernameNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, addresses } = response[0];\n        const addressElements = addresses.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorityEthereumAddressDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const ed25519PubkeyBytes = Encoding.fromHex(input) as PublicKeyBytes;\n\n  const bnsAddress = bnsCodec.identityToAddress({\n    chainId: \"some-testnet\" as ChainId,\n    pubkey: {\n      algo: Algorithm.Ed25519,\n      data: ed25519PubkeyBytes,\n    },\n  });\n  const liskAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        BNS: <Link to={\"#\" + bnsAddress}>{bnsAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: ReadonlyArray<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }>,\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // any testnet leads to \"tiov\" prefixes\n  const chainId = \"some-testnet\" as ChainId;\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = bnsCodec.identityToAddress(identity);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-simple-address`,\n    `Simple Address HD Wallet`,\n    addresses,\n    21,\n    true,\n  );\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n  readonly bnsNftSupported?: boolean;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Zebranet (bnsd)\",\n    url: \"https://bns.zebranet.iov.one\",\n    bnsNftSupported: true,\n  },\n  {\n    name: \"Zebranet (bcpd)\",\n    url: \"https://bcp.zebranet.iov.one\",\n  },\n];\n\nexport const liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: ReadonlyArray<HdCoin> = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: ReadonlyArray<HdCoin> = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsUsernameNftDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovTestnets,\n  liskNetworks,\n  riseNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsernameNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsUsernameNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}