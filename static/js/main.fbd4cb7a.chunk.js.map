{"version":3,"sources":["bcphelpers.ts","interprete.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","InputProperties","toHex","Encoding","bcpConnections","Map","makeBnsAccountDisplay","id","priority","interpretedAs","query","network","getData","_getData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","this","apply","arguments","renderData","data","length","_response$data$","address","pubkey","balance","name","hexPubkey","undefined","react_default","createElement","Link","to","className","map","join","makeBnsAddressDisplay","input","makeBnsNameDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","_response$data$2","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","_response$data$3","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","fromHex","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","bnsAddress","bnsCodec","keyToAddress","liskAddress","liskCodec","riseAddress","riseCodec","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee4","wallet","addresses","index","_path","_address4","rows","_context4","Ed25519HdWallet","fromMnemonic","path","HdPaths","simpleAddress","createIdentity","push","key","makeHdWalletDisplay","_x2","_x3","_x4","_x5","_makeHdWalletDisplay","_callee5","coinNumber","coinName","codec","_path2","_address5","_context5","Slip10RawIndex","hardened","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee6","_context6","t0","passphraseToKeypair","t1","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsUsername","BnsBlockchain","isValidAddress","LiskAddress","RiseAddress","isInteractiveDisplay","display","iovTestnets","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","processInput","_processInput","normalizedInput","properties","_i","_i2","_network","_i3","hdCoin","_i4","_network2","_i5","_network3","trim","Array","call","t2","t3","t4","t5","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","value","onChange","autoFocus","readOnly","window","href","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_iterator2","filter","_iteratorNormalCompletion2","_step2","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.fbd4cb7a.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp-types\";\n\nimport leftPad from \"left-pad\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  BnsBlockchain,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9\\.,\\+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsUsername);\n    out.add(InputProperties.BnsBlockchain);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  return out;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Algorithm, PublicKeyBundle, PublicKeyBytes } from \"@iov/base-types\";\nimport {\n  Address,\n  BcpAccount,\n  BcpAccountQuery,\n  BcpConnection,\n  BcpQueryEnvelope,\n  TxCodec,\n} from \"@iov/bcp-types\";\nimport { bnsCodec, BnsConnection } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\nimport { liskCodec, LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { riseCodec, RiseConnection } from \"@iov/rise\";\n\nimport { printAmount } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\n\nconst { toHex } = Encoding;\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nconst bcpConnections = new Map<string, Promise<BcpConnection>>();\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: BcpAccountQuery,\n  network: NetworkSettings,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Name</td>\n              <td>{name ? <Link to={\"#\" + name}>{name}</Link> : \"<none>\"}</td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const priority = 9;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(id, priority, interpretedAs, { address: input as Address }, network);\n}\n\nexport function makeBnsNameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-name`;\n  const priority = 11;\n  const interpretedAs = `Name on ${network.name}`;\n  return makeBnsAccountDisplay(id, priority, interpretedAs, { name: input }, network);\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const priority = 10;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const priority = 10;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: 10,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: 20,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: 10,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PublicKeyBytes,\n  };\n\n  const bnsAddress = bnsCodec.keyToAddress(pubkey);\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: 7,\n    data: (\n      <div>\n        BNS: <Link to={\"#\" + bnsAddress}>{bnsAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly address: Address;\n  }> = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = bnsCodec.keyToAddress(pubkey);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      address: address,\n    });\n  }\n\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{a.address}</Link>\n    </div>\n  ));\n\n  return {\n    id: `${input}#hd-wallet-simple-address`,\n    interpretedAs: `Simple Address HD Wallet`,\n    priority: 8,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeHdWalletDisplay(\n  input: string,\n  coinNumber: number,\n  coinName: string,\n  codec: TxCodec,\n): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = codec.keyToAddress(pubkey);\n    addresses.push({\n      path: `44'/${coinNumber}'/${a}'`,\n      address: address,\n    });\n  }\n\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{a.address}</Link>\n    </div>\n  ));\n\n  return {\n    id: `${input}#hd-wallet-coin${coinNumber}`,\n    interpretedAs: `${coinName} HD Wallet`,\n    priority: 8,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: (await passphraseToKeypair(input)).pubkey as PublicKeyBytes,\n  };\n\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: 7,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: 11,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { TxCodec } from \"@iov/bcp-types\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nimport {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsNameDisplay,\n  makeEd25519PubkeyDisplay,\n  makeHdWalletDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n  NetworkSettings,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<object>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nconst iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Yaknet (bnsd)\",\n    url: \"https://bns.yaknet.iov.one\",\n  },\n  {\n    name: \"Yaknet (bcpd)\",\n    url: \"https://bov.yaknet.iov.one\",\n  },\n];\n\nconst liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nconst riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nconst accountBasedSlip10HdCoins: ReadonlyArray<{\n  readonly name: string;\n  readonly number: number;\n  readonly codec: TxCodec;\n}> = [\n  // {\n  //   name: \"IOV\",\n  //   number: 234,\n  //   codec: bnsCodec,\n  // },\n  {\n    name: \"Lisk\",\n    number: 134,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    codec: riseCodec,\n  },\n];\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsNameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeHdWalletDisplay(normalizedInput, hdCoin.number, hdCoin.name, hdCoin.codec));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => (\n          <div key={display.id} className=\"display\">\n            <div className=\"display-title\">{display.interpretedAs}</div>\n            <div className=\"display-data\">{display.data}</div>\n          </div>\n        ))\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}