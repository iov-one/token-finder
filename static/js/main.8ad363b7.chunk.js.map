{"version":3,"sources":["bcphelpers.ts","uielements.tsx","interprete.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","ellideMiddle","str","maxOutLen","length","frontLen","Math","ceil","tailLen","floor","InputProperties","toHex","Encoding","priorityEd25519PubkeyDisplay","priorityLiskLikePassphraseDisplay","priorityHdAddressesDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameNftDisplay","priorityBnsBlockchainNftDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAddressDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","this","apply","renderData","data","address","pubkey","balance","hexPubkey","react_default","createElement","Link","to","className","map","join","makeBnsAccountDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","_response$data$","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","_response$data$2","makeBnsUsernameNftDisplay","displayId","_getData4","_callee4","_context4","getUsernames","username","_response$","owner","addressElements","addresses","pair","chainId","title","makeBnsBlockchainNftDisplay","_getData5","_callee5","_context5","getBlockchains","_response$2","codecName","codecConfig","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","fromHex","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEd25519PubkeyDisplay","ed25519PubkeyBytes","bnsAddress","bnsCodec","identityToAddress","algo","Algorithm","Ed25519","liskAddress","Derivation","pubkeyToAddress","riseAddress","makeHdAddressesDisplay","rows","key","path","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee6","wallet","index","_path","identity","_address4","_context6","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","push","makeHdWalletDisplay","_x2","_x3","_x4","_x5","_x6","_makeHdWalletDisplay","_callee7","coinNumber","coinName","codec","_path2","_address5","_context7","Slip10RawIndex","hardened","makeLiskLikePassphraseDisplay","_x7","_makeLiskLikePassphraseDisplay","_callee8","_context8","t0","passphraseToKeypair","t1","call","t2","t3","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsBlockchainNft","BnsUsernameNft","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","isInteractiveDisplay","display","iovTestnets","bnsNftSupported","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","processInput","_processInput","normalizedInput","properties","_i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_network","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network2","_i2","hdCoin","_i3","_network3","_i4","_network4","trim","Array","filter","testnet","Symbol","iterator","done","value","return","finish","t4","t5","t6","t7","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","href","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.8ad363b7.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp-types\";\n\nimport leftPad from \"left-pad\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Address } from \"@iov/bcp-types\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsBlockchainNft,\n  BnsUsernameNft,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9\\.,\\+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsBlockchainNft);\n    out.add(InputProperties.BnsUsernameNft);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  return out;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Address,\n  Algorithm,\n  BcpAccount,\n  BcpAccountQuery,\n  BcpConnection,\n  BcpQueryEnvelope,\n  ChainId,\n  PublicKeyBundle,\n  PublicKeyBytes,\n  TxCodec,\n} from \"@iov/bcp-types\";\nimport { BnsBlockchainNft, bnsCodec, BnsConnection, BnsUsernameNft } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\nimport { liskCodec, LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { riseCodec, RiseConnection } from \"@iov/rise\";\n\nimport { printAmount } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { toHex } = Encoding;\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n  readonly bnsNftSupported?: boolean;\n}\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 7;\nconst priorityHdAddressesDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameNftDisplay = 15;\nconst priorityBnsBlockchainNftDisplay = 16;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BcpConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: BcpAccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: BcpAccount | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance, name } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>\n                  <Link to={\"#\" + address}>{address}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Name</td>\n                <td>{name ? <Link to={\"#\" + name}>{name}</Link> : \"<none>\"}</td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username-nft`;\n  const interpretedAs = `Username NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsUsernameNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, addresses } = response[0];\n        const addressElements = addresses.map(pair => (\n          <span>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsBlockchainNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-blockchain-nft`;\n  const interpretedAs = `Blockchain NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsBlockchainNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getBlockchains({ chainId: input as ChainId });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsBlockchainNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, codecName, codecConfig } = response[0];\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Codec</td>\n                <td>{codecName}</td>\n              </tr>\n              <tr>\n                <td>Codec config</td>\n                <td>{codecConfig}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const ed25519PubkeyBytes = Encoding.fromHex(input) as PublicKeyBytes;\n\n  const bnsAddress = bnsCodec.identityToAddress({\n    chainId: \"some-testnet\" as ChainId,\n    pubkey: {\n      algo: Algorithm.Ed25519,\n      data: ed25519PubkeyBytes,\n    },\n  });\n  const liskAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        BNS: <Link to={\"#\" + bnsAddress}>{bnsAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: ReadonlyArray<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }>,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{ellideMiddle(a.address, 21)}</Link>{\" \"}\n      ({a.pubkey.algo}/<Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // any testnet leads to \"tiov\" prefixes\n  const chainId = \"some-testnet\" as ChainId;\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = bnsCodec.identityToAddress(identity);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(`${input}#hd-wallet-simple-address`, `Simple Address HD Wallet`, addresses);\n}\n\nexport async function makeHdWalletDisplay(\n  input: string,\n  coinNumber: number,\n  coinName: string,\n  chainId: ChainId,\n  codec: TxCodec,\n): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: `44'/${coinNumber}'/${a}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(`${input}#hd-wallet-coin${coinNumber}`, `${coinName} HD Wallet`, addresses);\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { ChainId, TxCodec } from \"@iov/bcp-types\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nimport {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsBlockchainNftDisplay,\n  makeBnsUsernameNftDisplay,\n  makeEd25519PubkeyDisplay,\n  makeHdWalletDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n  NetworkSettings,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nconst iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Yaknet (bnsd)\",\n    url: \"https://bns.yaknet.iov.one\",\n    bnsNftSupported: true,\n  },\n  {\n    name: \"Yaknet (bcpd)\",\n    url: \"https://bov.yaknet.iov.one\",\n  },\n];\n\nconst liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nconst riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nconst accountBasedSlip10HdCoins: ReadonlyArray<{\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}> = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsernameNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsUsernameNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsBlockchainNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsBlockchainNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(\n        await makeHdWalletDisplay(normalizedInput, hdCoin.number, hdCoin.name, hdCoin.chainId, hdCoin.codec),\n      );\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}