{"version":3,"sources":["bcphelpers.ts","uielements.tsx","displays/rest.tsx","displays/bech32.tsx","displays/hdwallet.tsx","displays/hex.tsx","interprete.ts","settings.ts","displays/weaveCondition.tsx","displays/weaveAddress.tsx","displays/weaveId.tsx","displays/index.ts","inputprocessing.tsx","App.tsx","index.tsx"],"names":["printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","padStart","replace","tokenTicker","ellideMiddle","str","maxOutLen","length","frontLen","Math","ceil","tailLen","floor","addressLink","address","Link","to","printEllideMiddle","title","bcpConnections","Map","bnsConnections","makeIovAccountDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","getData","a","has","url","set","BnsConnection","establish","get","connection","getAccount","response","getUsernames","owner","names","account","undefined","renderData","data","pubkey","balance","hexPubkey","toHex","nameElements","map","key","className","join","makeIovAccountDisplayImpl","priorities","bnsAddress","makeLiskAccountDisplay","liskAddress","LiskConnection","makeIovUsernameDisplay","displayId","bnsUsername","username","addressElements","targets","pair","chainId","makeEthereumAddressDisplay","lower","toLowerCase","checksummed","toChecksummedAddress","ethereumAddress","href","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","fromHex","iovTestAddress","bnsPubkeyToAddress","iovMainAddress","liskPubkeyToAddress","ed25519Pubkey","makeSecp256k1PubkeyDisplay","Secp256k1","ethereumPubkeyToAddress","secp256k1Pubkey","makeEd25519PrivkeyDisplay","seed","ed25519Pivkey","makeLiskLikePassphraseDisplay","passphraseToKeypair","liskLikePassphrase","makeBip39MnemonicDisplay","mnemonic","EnglishMnemonic","entropy","Bip39","decode","wordCount","Error","bip39Mnemonic","makeBech32Display","parsed","Bech32","bech32","prefix","makeHdAddressesDisplay","addresses","addressLength","rows","path","hdAddresses","makeEd25519HdWalletDisplay","coin","coinIndex","coinName","codec","wallet","Ed25519HdWallet","fromMnemonic","pathMaker","createIdentity","identity","identityToAddress","push","pathToString","makeSecp256k1HdWalletDisplay","Secp256k1HdWallet","makeHexDisplay","inputData","hex","toUpperCase","InputProperties","weaveConditionRegex","bnsUsernameRegex","interprete","Set","out","value","Uint64","fromString","add","toString","NonZeroUint64","rawData","Hex","ByteLength20","ByteLength32","ByteLength64","ByteLength65","IovAddressMainnet","IovAddressTestnet","EnglishMnemonic12Words","match","BnsUsername","liskCodec","isValidAddress","LiskAddress","ethereumCodec","EthereumAddress","WeaveCondition","iovMainnet2Codec","CosmWasmCodec","ticker","denom","iovChainIds","iovTestnets","iovMainnet","liskNetworks","accountBasedSlip10HdCoins","HdPaths","iov","bnsCodec","bip44Like","secp256k1Slip10HdCoins","iovCosmosSdk","ethereum","makeWeaveConditionDisplay","extension","type","hexData","condition","buildCondition","tiovAddress","conditionToAddress","iovAddress","weaveCondition","makeWeaveAddressDisplay","encode","weaveAddress","makeWeaveIdDisplay","idSuffix","toBytesBigEndian","conditionString","makeWeaveEscrowId","weaveEscrowId","makeWeaveGovernanceRuleId","weaveGovernanceRuleId","makeWeaveMultisigId","weaveMutltisigId","isInteractiveDisplay","display","compareByPriority","b","processInput","normalizedInput","trim","properties","Array","hdCoin","startsWith","sort","App","React","Component","constructor","props","super","timeouts","this","state","history","listen","location","hashQuery","hash","decodeURIComponent","handleQuery","handleChange","bind","componentDidMount","render","listItems","placeholder","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","console","log","updateDisplay","updatedDisplay","list","x","index","findIndex","i","setState","allStatic","timeout","clearTimeout","setTimeout","filter","interactiveDisplay","job","then","catch","error","rendered","withRouter","ReactDOM","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.b285291a.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = (amount.quantity.slice(-amount.fractionalDigits) || \"0\").padStart(\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n","import { Address } from \"@iov/bcp\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  PubkeyBundle,\n  PubkeyBytes,\n} from \"@iov/bcp\";\nimport { BnsConnection, BnsUsernameNft, pubkeyToAddress as bnsPubkeyToAddress } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { fromHex, toHex } from \"@iov/encoding\";\nimport { pubkeyToAddress as ethereumPubkeyToAddress, toChecksummedAddress } from \"@iov/ethereum\";\nimport { LiskConnection, passphraseToKeypair, pubkeyToAddress as liskPubkeyToAddress } from \"@iov/lisk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printAmount } from \"../bcphelpers\";\nimport { NetworkSettings } from \"../settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"../uielements\";\nimport { InteractiveDisplay, priorities, StaticDisplay } from \".\";\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeIovAccountDisplayImpl(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      if (response) {\n        const names = await connection.getUsernames({ owner: response.address });\n        return {\n          account: response,\n          names: names,\n        };\n      } else {\n        return undefined;\n      }\n    },\n    renderData: (\n      response: { readonly account: Account; readonly names: readonly BnsUsernameNft[] } | undefined,\n    ) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response.account;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n\n        const nameElements = response.names.map(name => (\n          <span key={name.id}>\n            <Link to={\"#\" + name.id}>{ellideMiddle(name.id, 40)}</Link>\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \") || \"none\"}</td>\n              </tr>\n              <tr>\n                <td>Names</td>\n                <td>{nameElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeIovAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return makeIovAccountDisplayImpl(\n    id,\n    priorities.bnsAddress,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorities.liskAddress,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \") || \"none\"}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorities.liskAddress,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeIovUsernameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username`;\n  const interpretedAs = `Username on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorities.bnsUsername,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: readonly BnsUsernameNft[]) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, targets } = response[0];\n        const addressElements = targets.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Username not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorities.bnsUsername,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorities.ethereumAddress,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: fromHex(input) as PubkeyBytes,\n  };\n\n  const iovTestAddress = bnsPubkeyToAddress(pubkey, \"tiov\");\n  const iovMainAddress = bnsPubkeyToAddress(pubkey, \"iov\");\n  const liskAddress = liskPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorities.ed25519Pubkey,\n    data: (\n      <div>\n        IOV main: <Link to={\"#\" + iovMainAddress}>{iovMainAddress}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + iovTestAddress}>{iovTestAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeSecp256k1PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Secp256k1,\n    data: fromHex(input) as PubkeyBytes,\n  };\n\n  const ethereumAddress = ethereumPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#secp256k1-pubkey`,\n    interpretedAs: \"Secp256k1 public key\",\n    priority: priorities.secp256k1Pubkey,\n    data: (\n      <div>\n        Ethereum: <Link to={\"#\" + ethereumAddress}>{ethereumAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PrivkeyDisplay(input: string): StaticDisplay {\n  const seed = fromHex(input).slice(0, 32);\n  const pubkey = fromHex(input).slice(32, 64) as PubkeyBytes;\n\n  return {\n    id: `${input}#ed25519-privkey`,\n    interpretedAs: \"Ed25519 private key (libsodium format)\",\n    priority: priorities.ed25519Pivkey,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Seed:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(seed)}</div>\n        </div>\n        <div>\n          Pubkey: <Link to={\"#\" + toHex(pubkey)}>{printEllideMiddle(toHex(pubkey), 40)}</Link>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: (await passphraseToKeypair(input)).pubkey as PubkeyBytes,\n  };\n  const liskAddress = liskPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorities.liskLikePassphrase,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorities.bip39Mnemonic,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { Bech32, toHex } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { priorities, StaticDisplay } from \".\";\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorities.bech32,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n","import { Address, PubkeyBundle } from \"@iov/bcp\";\nimport { pathToString } from \"@iov/crypto\";\nimport { toHex } from \"@iov/encoding\";\nimport { Ed25519HdWallet, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { HdCoin } from \"../settings\";\nimport { ellideMiddle } from \"../uielements\";\nimport { priorities, StaticDisplay } from \".\";\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: readonly {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[],\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorities.hdAddresses,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { coinIndex, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path = coin.pathMaker(a);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: pathToString(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-ed25519-coin${coinIndex}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { coinIndex, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path = coin.pathMaker(a);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: pathToString(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-secp256k1-coin${coinIndex}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n","import { fromHex } from \"@iov/encoding\";\nimport React from \"react\";\n\nimport { priorities, StaticDisplay } from \".\";\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = fromHex(input);\n  return {\n    id: `${input}#hex-data`,\n    interpretedAs: \"Hex data\",\n    priority: priorities.hex,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, fromHex, Uint64 } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\n\nexport enum InputProperties {\n  /* eslint-disable no-shadow */\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  ByteLength64,\n  ByteLength65,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  LiskAddress,\n  WeaveCondition,\n  Uint64,\n  NonZeroUint64,\n  /* eslint-enable no-shadow */\n}\n\nexport const weaveConditionRegex = /^cond:([a-zA-Z]+)\\/([a-zA-Z]+)\\/(([a-fA-F0-9]{2})+)$/;\nexport const bnsUsernameRegex = /^[a-z0-9.\\-_]{3,64}\\*iov$/;\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set<InputProperties>();\n\n  try {\n    const value = Uint64.fromString(input);\n    out.add(InputProperties.Uint64);\n    if (value.toString() !== \"0\") {\n      out.add(InputProperties.NonZeroUint64);\n    }\n  } catch {}\n\n  try {\n    const rawData = fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) out.add(InputProperties.ByteLength20);\n    if (rawData.length === 32) out.add(InputProperties.ByteLength32);\n    if (rawData.length === 64) out.add(InputProperties.ByteLength64);\n    if (rawData.length === 65) out.add(InputProperties.ByteLength65);\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  if (input.match(bnsUsernameRegex)) {\n    out.add(InputProperties.BnsUsername);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  if (input.match(weaveConditionRegex)) {\n    out.add(InputProperties.WeaveCondition);\n  }\n\n  return out;\n}\n","import { BankToken, CosmWasmCodec } from \"@cosmwasm/bcp\";\nimport { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { HdPaths } from \"@iov/keycontrol\";\nimport { liskCodec } from \"@iov/lisk\";\n\nconst bankTokens: readonly BankToken[] = [\n  {\n    fractionalDigits: 9,\n    ticker: \"IOV\",\n    denom: \"niov\",\n  },\n];\nconst iovMainnet2Codec = new CosmWasmCodec(\"star\", bankTokens);\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  /** The SLIP-0044 coin index */\n  readonly coinIndex: number;\n  /** A function that generates an HD path for a given account index */\n  readonly pathMaker: (accountIndex: number) => readonly Slip10RawIndex[];\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovChainIds = {\n  testnet: \"iov-lovenet\" as ChainId, // Any testnet is okay here. Used for address calculation only\n  mainnet: \"iov-mainnet\" as ChainId,\n};\n\nconst iovDevnets: readonly NetworkSettings[] =\n  process.env.NODE_ENV === \"development\"\n    ? [\n        {\n          name: \"Devnet\",\n          url: \"http://localhost:23456/\",\n        },\n      ]\n    : [];\n\nexport const iovTestnets: readonly NetworkSettings[] = [\n  {\n    name: \"Exchangenet 📈\",\n    url: \"https://rpc-private-a-x-exchangenet.iov.one/\",\n  },\n  ...iovDevnets,\n];\n\nexport const iovMainnet: NetworkSettings = {\n  name: \"Mainnet\",\n  url: \"https://rpc-private-a-vip-mainnet.iov.one\",\n};\n\nexport const liskNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV\",\n    coinIndex: 234,\n    pathMaker: HdPaths.iov,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    coinIndex: 134,\n    pathMaker: account => HdPaths.bip44Like(134, account),\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV (Cosmos SDK based)\",\n    coinIndex: 234,\n    pathMaker: HdPaths.iovCosmosSdk,\n    chainId: \"iov-mainnet-2\" as ChainId,\n    codec: iovMainnet2Codec,\n  },\n  {\n    name: \"Ethereum\",\n    coinIndex: 60,\n    pathMaker: HdPaths.ethereum,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import { buildCondition, conditionToAddress } from \"@iov/bns\";\nimport { fromHex, toHex } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { weaveConditionRegex } from \"../interprete\";\nimport { iovChainIds } from \"../settings\";\nimport { priorities, StaticDisplay } from \".\";\n\nexport function makeWeaveConditionDisplay(input: string): StaticDisplay {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const match = input.match(weaveConditionRegex)!;\n  const [, extension, type, hexData] = match;\n  const data = fromHex(hexData);\n\n  const condition = buildCondition(extension, type, data);\n\n  const tiovAddress = conditionToAddress(iovChainIds.testnet, condition);\n  const iovAddress = conditionToAddress(iovChainIds.mainnet, condition);\n  return {\n    id: `${input}#weave-condition`,\n    interpretedAs: \"Weave condition\",\n    priority: priorities.weaveCondition,\n    data: (\n      <div>\n        Extension: {extension}\n        <br />\n        Type: {type}\n        <br />\n        Data: <Link to={\"#\" + toHex(data)}>{toHex(data)}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n","import { Bech32, fromHex } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { priorities, StaticDisplay } from \".\";\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorities.weaveAddress,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n","import { toHex, Uint64 } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { priorities, StaticDisplay } from \".\";\n\nfunction makeWeaveIdDisplay(\n  idSuffix: string,\n  interpretedAs: string,\n  priority: number,\n  extension: string,\n  type: string,\n  input: string,\n): StaticDisplay {\n  const data = Uint64.fromString(input).toBytesBigEndian();\n  const conditionString = `cond:${extension}/${type}/${toHex(data).toUpperCase()}`;\n  return {\n    id: `${input}#${idSuffix}`,\n    interpretedAs: interpretedAs,\n    priority: priority,\n    data: (\n      <div>\n        Condition: <Link to={\"#\" + conditionString}>{conditionString}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveEscrowId(input: string): StaticDisplay {\n  return makeWeaveIdDisplay(\n    \"weave-escrow-id\",\n    \"Weave escrow ID\",\n    priorities.weaveEscrowId,\n    \"escrow\",\n    \"seq\",\n    input,\n  );\n}\n\nexport function makeWeaveGovernanceRuleId(input: string): StaticDisplay {\n  return makeWeaveIdDisplay(\n    \"weave-governance-rule-id\",\n    \"Weave governance rule ID\",\n    priorities.weaveGovernanceRuleId,\n    \"gov\",\n    \"rule\",\n    input,\n  );\n}\n\nexport function makeWeaveMultisigId(input: string): StaticDisplay {\n  return makeWeaveIdDisplay(\n    \"weave-multisig-id\",\n    \"Weave multisignature ID\",\n    priorities.weaveMutltisigId,\n    \"multisig\",\n    \"usage\",\n    input,\n  );\n}\n","export {\n  makeBip39MnemonicDisplay,\n  makeIovAccountDisplay,\n  makeIovUsernameDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeSecp256k1PubkeyDisplay,\n} from \"./rest\";\nexport { makeBech32Display } from \"./bech32\";\nexport { makeEd25519HdWalletDisplay, makeSecp256k1HdWalletDisplay } from \"./hdwallet\";\nexport { makeHexDisplay } from \"./hex\";\nexport { makeWeaveConditionDisplay } from \"./weaveCondition\";\nexport { makeWeaveAddressDisplay } from \"./weaveAddress\";\nexport { makeWeaveEscrowId, makeWeaveGovernanceRuleId, makeWeaveMultisigId } from \"./weaveId\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport const priorities = {\n  ed25519Pubkey: 7,\n  secp256k1Pubkey: 7,\n  ed25519Pivkey: 7,\n  hdAddresses: 7,\n  liskLikePassphrase: 8,\n  bnsAddress: 9,\n  liskAddress: 10,\n  bech32: 10,\n  weaveAddress: 10,\n  weaveCondition: 10,\n  weaveEscrowId: 10,\n  weaveGovernanceRuleId: 10,\n  weaveMutltisigId: 10,\n  ethereumAddress: 10,\n  bip39Mnemonic: 11,\n  bnsUsername: 15,\n  hex: 20,\n};\n","import {\n  Display,\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeIovAccountDisplay,\n  makeIovUsernameDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSecp256k1PubkeyDisplay,\n  makeWeaveAddressDisplay,\n  makeWeaveConditionDisplay,\n  makeWeaveEscrowId,\n  makeWeaveGovernanceRuleId,\n  makeWeaveMultisigId,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovMainnet,\n  iovTestnets,\n  liskNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nfunction compareByPriority(a: Display, b: Display): number {\n  return a.priority - b.priority;\n}\n\nexport async function processInput(input: string): Promise<readonly Display[]> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeIovAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.IovAddressMainnet)) {\n    out.push(makeIovAccountDisplay(normalizedInput, iovMainnet));\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    out.push(makeIovUsernameDisplay(normalizedInput, iovMainnet));\n    for (const network of iovTestnets) {\n      out.push(makeIovUsernameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength64)) {\n      out.push(makeEd25519PrivkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength65) && normalizedInput.startsWith(\"04\")) {\n      out.push(makeSecp256k1PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.WeaveCondition)) {\n    out.push(makeWeaveConditionDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.NonZeroUint64)) {\n    out.push(makeWeaveEscrowId(normalizedInput));\n    out.push(makeWeaveGovernanceRuleId(normalizedInput));\n    out.push(makeWeaveMultisigId(normalizedInput));\n  }\n\n  out.sort(compareByPriority);\n\n  return out;\n}\n","import { History } from \"history\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, StaticDisplay } from \"./displays\";\nimport { processInput } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: History;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: readonly StaticDisplay[];\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  public constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      const query = decodeURIComponent(hashQuery);\n      this.handleQuery(query);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    // After some delay, push this input to browser history\n    this.timeouts.push(\n      setTimeout(() => {\n        const currentLocationHash = decodeURIComponent(this.props.location.hash.slice(1));\n        if (currentLocationHash !== newValue) {\n          this.props.history.push(`#${encodeURIComponent(newValue)}`);\n        }\n      }, 2500),\n    );\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = (): void => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}