{"version":3,"sources":["bcphelpers.ts","uielements.tsx","interprete.ts","displays.tsx","settings.ts","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","padStart","replace","concat","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","Math","pow","join","ellideMiddle","str","maxOutLen","length","frontLen","ceil","tailLen","floor","addressLink","address","react_default","a","createElement","Link","to","printEllideMiddle","title","InputProperties","fromHex","Encoding","toHex","priorityEd25519PubkeyDisplay","priorityEd25519PivkeyDisplay","priorityHdAddressesDisplay","priorityLiskLikePassphraseDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityEthereumAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAccountDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","mark","_callee","connection","response","names","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","getUsernames","owner","abrupt","account","stop","apply","this","renderData","data","_response$account","pubkey","balance","hexPubkey","nameElements","key","className","makeBnsAccountDisplayImpl","makeLiskAccountDisplay","_getData2","_callee2","_context2","LiskConnection","makeRiseAccountDisplay","_getData3","_callee3","_context3","RiseConnection","makeBnsUsernameDisplay","displayId","_getData4","_callee4","_context4","username","_response$","addressElements","targets","pair","chainId","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEthereumAddressDisplay","lower","checksummed","toChecksummedAddress","href","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","iovTestAddress","pubkeyToAddress","iovMainAddress","liskAddress","Derivation","riseAddress","makeEd25519PrivkeyDisplay","seed","makeHdAddressesDisplay","addresses","addressLength","rows","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee5","wallet","index","identity","_context5","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","bnsCodec","identityToAddress","push","makeEd25519HdWalletDisplay","_x2","_x3","_makeEd25519HdWalletDisplay","_callee6","coin","coinNumber","coinName","codec","_context6","number","Slip10RawIndex","hardened","makeSecp256k1HdWalletDisplay","_x4","_x5","_makeSecp256k1HdWalletDisplay","_callee7","_context7","Secp256k1HdWallet","normal","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee8","_context8","t0","passphraseToKeypair","t1","call","t2","t3","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","ByteLength64","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsUsername","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","ethereumCodec","EthereumAddress","iovTestnets","bnsUsernameSupported","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","secp256k1Slip10HdCoins","isInteractiveDisplay","display","processInput","_processInput","normalizedInput","properties","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","hdCoin","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_hdCoin","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_network2","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_network3","trim","Array","Symbol","iterator","done","value","return","finish","filter","testnet","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.800bb314.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = (amount.quantity.slice(-amount.fractionalDigits) || \"0\").padStart(\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: readonly Slip10RawIndex[]): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import { Address } from \"@iov/bcp\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  /* eslint-disable no-shadow */\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  ByteLength64,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  LiskAddress,\n  RiseAddress,\n  /* eslint-enable no-shadow */\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set<InputProperties>();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n    if (rawData.length === 64) {\n      out.add(InputProperties.ByteLength64);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // TODO: update min length to 3 starting with weave 0.21\n  if (input.match(/^[a-z0-9.\\-_]{1,64}\\*iov$/)) {\n    out.add(InputProperties.BnsUsername);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  return out;\n}\n","import {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  ChainId,\n  PubkeyBundle,\n  PubkeyBytes,\n} from \"@iov/bcp\";\nimport { bnsCodec, BnsConnection, BnsUsernameNft, pubkeyToAddress } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { toChecksummedAddress } from \"@iov/ethereum\";\nimport { Ed25519HdWallet, HdPaths, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport { LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { RiseConnection } from \"@iov/rise\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printAmount, printPath } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { HdCoin, NetworkSettings } from \"./settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { fromHex, toHex } = Encoding;\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst priorityEd25519PivkeyDisplay = 7;\nconst priorityHdAddressesDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityEthereumAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameDisplay = 15;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplayImpl(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      if (response) {\n        const names = await connection.getUsernames({ owner: response.address });\n        return {\n          account: response,\n          names: names,\n        };\n      } else {\n        return undefined;\n      }\n    },\n    renderData: (\n      response: { readonly account: Account; readonly names: readonly BnsUsernameNft[] } | undefined,\n    ) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response.account;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n\n        const nameElements = response.names.map(name => (\n          <span key={name.id}>\n            <Link to={\"#\" + name.id}>{ellideMiddle(name.id, 40)}</Link>\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n              <tr>\n                <td>Names</td>\n                <td>{nameElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return makeBnsAccountDisplayImpl(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username`;\n  const interpretedAs = `Username on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: readonly BnsUsernameNft[]) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, targets } = response[0];\n        const addressElements = targets.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Username not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorityEthereumAddressDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const iovTestAddress = pubkeyToAddress(pubkey, \"tiov\");\n  const iovMainAddress = pubkeyToAddress(pubkey, \"iov\");\n  const liskAddress = Derivation.pubkeyToAddress(pubkey.data, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(pubkey.data, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        IOV main: <Link to={\"#\" + iovMainAddress}>{iovMainAddress}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + iovTestAddress}>{iovTestAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PrivkeyDisplay(input: string): StaticDisplay {\n  const seed = fromHex(input).slice(0, 32);\n  const pubkey = fromHex(input).slice(32, 64) as PubkeyBytes;\n\n  return {\n    id: `${input}#ed25519-privkey`,\n    interpretedAs: \"Ed25519 private key (libsodium format)\",\n    priority: priorityEd25519PivkeyDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Seed:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(seed)}</div>\n        </div>\n        <div>\n          Pubkey: <Link to={\"#\" + toHex(pubkey)}>{printEllideMiddle(toHex(pubkey), 40)}</Link>\n        </div>\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: readonly {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[],\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // any testnet leads to \"tiov\" prefixes\n  const chainId = \"some-testnet\" as ChainId;\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = bnsCodec.identityToAddress(identity);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-simple-address`,\n    `Simple Address HD Wallet`,\n    addresses,\n    21,\n    true,\n  );\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n  readonly bnsUsernameSupported?: boolean;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovChainIds = {\n  testnet: \"iov-lovenet\" as ChainId, // Any testnet is okay here. Used for address calculation only\n  mainnet: \"iov-mainnet\" as ChainId,\n};\n\nexport const iovTestnets: readonly NetworkSettings[] = [\n  {\n    name: \"Boarnet 🐗\",\n    url: \"https://rpc.boarnet.iov.one\",\n    bnsUsernameSupported: true,\n  },\n  {\n    name: \"Lovenet 😍\",\n    url: \"https://rpc.lovenet.iov.one\",\n    bnsUsernameSupported: true,\n  },\n];\n\nexport const liskNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const riseNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAccountDisplay,\n  makeBnsUsernameDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAccountDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovTestnets,\n  liskNetworks,\n  riseNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport async function processInput(input: string): Promise<readonly Display[]> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsUsernameSupported)) {\n      out.push(makeBnsUsernameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength64)) {\n      out.push(makeEd25519PrivkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: readonly StaticDisplay[];\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  public constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = (): void => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}