{"version":3,"sources":["bcphelpers.ts","uielements.tsx","interprete.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","ellideMiddle","str","maxOutLen","length","frontLen","Math","ceil","tailLen","floor","InputProperties","toHex","Encoding","priorityEd25519PubkeyDisplay","priorityLiskLikePassphraseDisplay","priorityHdAddressesDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameNftDisplay","priorityBnsBlockchainNftDisplay","priorityHexDisplay","priorityBnsNicknameDisplay","bcpConnections","Map","bnsConnections","makeBnsAccountDisplay","id","priority","interpretedAs","query","network","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","this","apply","renderData","data","_response$data$","address","pubkey","balance","name","hexPubkey","react_default","createElement","Link","to","className","map","join","makeBnsAddressDisplay","input","makeBnsNicknameDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","_response$data$2","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","_response$data$3","makeBnsUsernameNftDisplay","displayId","_getData4","_callee4","_context4","getUsernames","username","_response$","owner","addresses","ownerAsBech32","Bech32","encode","addressElements","pair","chainId","title","makeBnsBlockchainNftDisplay","_getData5","_callee5","_context5","getBlockchains","_response$2","codecName","codecConfig","makeBech32Display","parsed","decode","prefix","makeHexDisplay","inputData","fromHex","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","iovAddress","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","bnsAddress","bnsCodec","keyToAddress","liskAddress","liskCodec","riseAddress","riseCodec","makeHdAddressesDisplay","rows","key","path","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee6","wallet","index","_path","_pubkey4","_address4","_context6","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","push","makeHdWalletDisplay","_x2","_x3","_x4","_x5","_makeHdWalletDisplay","_callee7","coinNumber","coinName","codec","_path2","_pubkey5","_address5","_context7","Slip10RawIndex","hardened","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee8","_context8","t0","passphraseToKeypair","t1","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsNickname","BnsBlockchainNft","BnsUsernameNft","isValidAddress","LiskAddress","RiseAddress","isInteractiveDisplay","display","iovTestnets","bnsNftSupported","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","processInput","_processInput","normalizedInput","properties","_i","_i2","_network","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_network2","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network3","_i3","hdCoin","_i4","_network4","_i5","_network5","trim","Array","filter","testnet","Symbol","iterator","done","value","return","finish","t2","t3","call","t4","t5","t6","t7","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","href","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.39cb5740.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp-types\";\n\nimport leftPad from \"left-pad\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Address } from \"@iov/bcp-types\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsNickname,\n  BnsBlockchainNft,\n  BnsUsernameNft,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9\\.,\\+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsNickname);\n    out.add(InputProperties.BnsBlockchainNft);\n    out.add(InputProperties.BnsUsernameNft);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  return out;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Algorithm, ChainId, PublicKeyBundle, PublicKeyBytes } from \"@iov/base-types\";\nimport {\n  Address,\n  BcpAccount,\n  BcpAccountQuery,\n  BcpConnection,\n  BcpQueryEnvelope,\n  TxCodec,\n} from \"@iov/bcp-types\";\nimport { BnsBlockchainNft, bnsCodec, BnsConnection, BnsUsernameNft } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\nimport { liskCodec, LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { riseCodec, RiseConnection } from \"@iov/rise\";\n\nimport { printAmount } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { toHex } = Encoding;\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n  readonly bnsNftSupported?: boolean;\n}\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 7;\nconst priorityHdAddressesDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameNftDisplay = 15;\nconst priorityBnsBlockchainNftDisplay = 16;\nconst priorityHexDisplay = 20;\nconst priorityBnsNicknameDisplay = 1011;\n\nconst bcpConnections = new Map<string, Promise<BcpConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: BcpAccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>\n                  <Link to={\"#\" + address}>{address}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Name</td>\n                <td>{name ? <Link to={\"#\" + name}>{name}</Link> : \"<none>\"}</td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeBnsNicknameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-nickname`;\n  const interpretedAs = `Nickname on ${network.name}`;\n  return makeBnsAccountDisplay(id, priorityBnsNicknameDisplay, interpretedAs, { name: input }, network, true);\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username-nft`;\n  const interpretedAs = `Username NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsUsernameNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, addresses } = response[0];\n        // TODO: BnsUsernameNft.owner should be of type Address directly\n        const ownerAsBech32 = Bech32.encode(\"tiov\", owner);\n        const addressElements = addresses.map(pair => (\n          <span>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + ownerAsBech32}>{ownerAsBech32}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsBlockchainNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-blockchain-nft`;\n  const interpretedAs = `Blockchain NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsBlockchainNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getBlockchains({ chainId: input as ChainId });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsBlockchainNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, codecName, codecConfig } = response[0];\n        // TODO: BnsUsernameNft.owner should be of type Address directly\n        const ownerAsBech32 = Bech32.encode(\"tiov\", owner);\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + ownerAsBech32}>{ownerAsBech32}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Codec</td>\n                <td>{codecName}</td>\n              </tr>\n              <tr>\n                <td>Codec config</td>\n                <td>{codecConfig}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PublicKeyBytes,\n  };\n\n  const bnsAddress = bnsCodec.keyToAddress(pubkey);\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        BNS: <Link to={\"#\" + bnsAddress}>{bnsAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: ReadonlyArray<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }>,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{ellideMiddle(a.address, 21)}</Link>{\" \"}\n      ({a.pubkey.algo}/<Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = bnsCodec.keyToAddress(pubkey);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(`${input}#hd-wallet-simple-address`, `Simple Address HD Wallet`, addresses);\n}\n\nexport async function makeHdWalletDisplay(\n  input: string,\n  coinNumber: number,\n  coinName: string,\n  codec: TxCodec,\n): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = codec.keyToAddress(pubkey);\n    addresses.push({\n      path: `44'/${coinNumber}'/${a}'`,\n      pubkey: pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(`${input}#hd-wallet-coin${coinNumber}`, `${coinName} HD Wallet`, addresses);\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: (await passphraseToKeypair(input)).pubkey as PublicKeyBytes,\n  };\n\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { TxCodec } from \"@iov/bcp-types\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nimport {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsBlockchainNftDisplay,\n  makeBnsNicknameDisplay,\n  makeBnsUsernameNftDisplay,\n  makeEd25519PubkeyDisplay,\n  makeHdWalletDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n  NetworkSettings,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<object>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nconst iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Yaknet (bnsd)\",\n    url: \"https://bns.yaknet.iov.one\",\n    bnsNftSupported: true,\n  },\n  {\n    name: \"Yaknet (bcpd)\",\n    url: \"https://bov.yaknet.iov.one\",\n  },\n];\n\nconst liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nconst riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nconst accountBasedSlip10HdCoins: ReadonlyArray<{\n  readonly name: string;\n  readonly number: number;\n  readonly codec: TxCodec;\n}> = [\n  {\n    name: \"IOV\",\n    number: 234,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    codec: riseCodec,\n  },\n];\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsNickname)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsNicknameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsernameNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsUsernameNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsBlockchainNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsBlockchainNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeHdWalletDisplay(normalizedInput, hdCoin.number, hdCoin.name, hdCoin.codec));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}