{"version":3,"sources":["bcphelpers.ts","uielements.tsx","displays/rest.tsx","interprete.ts","settings.ts","displays/weaveCondition.tsx","displays/index.ts","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","padStart","replace","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","join","ellideMiddle","str","maxOutLen","length","frontLen","Math","ceil","tailLen","floor","addressLink","address","Link","to","printEllideMiddle","title","fromHex","Encoding","toHex","priorityEd25519PubkeyDisplay","prioritySecp256k1PubkeyDisplay","priorityEd25519PivkeyDisplay","priorityHdAddressesDisplay","priorityLiskLikePassphraseDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityEthereumAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAccountDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","getData","a","has","url","set","BnsConnection","establish","get","connection","getAccount","response","getUsernames","owner","names","account","undefined","renderData","data","pubkey","balance","hexPubkey","nameElements","key","className","makeBnsAccountDisplayImpl","makeLiskAccountDisplay","LiskConnection","makeRiseAccountDisplay","RiseConnection","makeBnsUsernameDisplay","displayId","username","addressElements","targets","pair","chainId","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEthereumAddressDisplay","lower","checksummed","toChecksummedAddress","href","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","iovTestAddress","pubkeyToAddress","iovMainAddress","liskAddress","Derivation","riseAddress","makeSecp256k1PubkeyDisplay","Secp256k1","ethereumAddress","ethereumPubkeyToAddress","makeEd25519PrivkeyDisplay","seed","makeHdAddressesDisplay","addresses","addressLength","rows","makeEd25519HdWalletDisplay","coin","coinNumber","number","coinName","codec","wallet","Ed25519HdWallet","fromMnemonic","Slip10RawIndex","hardened","createIdentity","identity","identityToAddress","push","makeSecp256k1HdWalletDisplay","Secp256k1HdWallet","normal","makeLiskLikePassphraseDisplay","passphraseToKeypair","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","InputProperties","weaveConditionRegex","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","ByteLength64","ByteLength65","IovAddressMainnet","IovAddressTestnet","EnglishMnemonic12Words","match","BnsUsername","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","ethereumCodec","EthereumAddress","WeaveCondition","iovChainIds","testnet","mainnet","iovTestnets","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","bnsCodec","secp256k1Slip10HdCoins","makeWeaveConditionDisplay","extension","type","hexData","condition","buildCondition","conditionToAddress","priorityWeaveConditionDisplay","isInteractiveDisplay","display","processInput","normalizedInput","trim","properties","Array","hdCoin","startsWith","sort","b","App","props","timeouts","state","history","listen","location","hashQuery","hash","decodeURIComponent","handleQuery","handleChange","bind","this","listItems","placeholder","value","onChange","autoFocus","readOnly","window","encodeURIComponent","e","newValue","target","console","log","updatedDisplay","list","x","index","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","setTimeout","then","catch","error","toString","rendered","updateDisplay","filter","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.12976b92.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = (amount.quantity.slice(-amount.fractionalDigits) || \"0\").padStart(\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: readonly Slip10RawIndex[]): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import { Address } from \"@iov/bcp\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BlockchainConnection,\n  PubkeyBundle,\n  PubkeyBytes,\n} from \"@iov/bcp\";\nimport { BnsConnection, BnsUsernameNft, pubkeyToAddress } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { pubkeyToAddress as ethereumPubkeyToAddress, toChecksummedAddress } from \"@iov/ethereum\";\nimport { Ed25519HdWallet, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport { LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { RiseConnection } from \"@iov/rise\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printAmount, printPath } from \"../bcphelpers\";\nimport { HdCoin, NetworkSettings } from \"../settings\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"../uielements\";\nimport { InteractiveDisplay, StaticDisplay } from \".\";\n\nconst { fromHex, toHex } = Encoding;\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst prioritySecp256k1PubkeyDisplay = 7;\nconst priorityEd25519PivkeyDisplay = 7;\nconst priorityHdAddressesDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityEthereumAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameDisplay = 15;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BlockchainConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplayImpl(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      if (response) {\n        const names = await connection.getUsernames({ owner: response.address });\n        return {\n          account: response,\n          names: names,\n        };\n      } else {\n        return undefined;\n      }\n    },\n    renderData: (\n      response: { readonly account: Account; readonly names: readonly BnsUsernameNft[] } | undefined,\n    ) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response.account;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n\n        const nameElements = response.names.map(name => (\n          <span key={name.id}>\n            <Link to={\"#\" + name.id}>{ellideMiddle(name.id, 40)}</Link>\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n              <tr>\n                <td>Names</td>\n                <td>{nameElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return makeBnsAccountDisplayImpl(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAccountDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-account`;\n  const interpretedAs = `Account on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username`;\n  const interpretedAs = `Username on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: readonly BnsUsernameNft[]) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, targets } = response[0];\n        const addressElements = targets.map(pair => (\n          <span key={pair.chainId}>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Username not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEthereumAddressDisplay(input: string): StaticDisplay {\n  const lower = input.toLowerCase();\n  const checksummed = toChecksummedAddress(input);\n  return {\n    id: `${input}#ethereum-address`,\n    interpretedAs: \"Ethereum address\",\n    priority: priorityEthereumAddressDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{lower}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Checksummed:&nbsp;</div>\n          <div className=\"pair-value data\">{checksummed}</div>\n        </div>\n        <div>\n          View on Etherscan:&nbsp;\n          <a className=\"external\" href={\"https://ropsten.etherscan.io/address/\" + checksummed}>\n            Ropsten\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://rinkeby.etherscan.io/address/\" + checksummed}>\n            Rinkeby\n          </a>\n          &nbsp;\n          <a className=\"external\" href={\"https://etherscan.io/address/\" + checksummed}>\n            Mainnet\n          </a>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const iovTestAddress = pubkeyToAddress(pubkey, \"tiov\");\n  const iovMainAddress = pubkeyToAddress(pubkey, \"iov\");\n  const liskAddress = Derivation.pubkeyToAddress(pubkey.data, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(pubkey.data, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        IOV main: <Link to={\"#\" + iovMainAddress}>{iovMainAddress}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + iovTestAddress}>{iovTestAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeSecp256k1PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PubkeyBundle = {\n    algo: Algorithm.Secp256k1,\n    data: Encoding.fromHex(input) as PubkeyBytes,\n  };\n\n  const ethereumAddress = ethereumPubkeyToAddress(pubkey);\n\n  return {\n    id: `${input}#secp256k1-pubkey`,\n    interpretedAs: \"Secp256k1 public key\",\n    priority: prioritySecp256k1PubkeyDisplay,\n    data: (\n      <div>\n        Ethereum: <Link to={\"#\" + ethereumAddress}>{ethereumAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PrivkeyDisplay(input: string): StaticDisplay {\n  const seed = fromHex(input).slice(0, 32);\n  const pubkey = fromHex(input).slice(32, 64) as PubkeyBytes;\n\n  return {\n    id: `${input}#ed25519-privkey`,\n    interpretedAs: \"Ed25519 private key (libsodium format)\",\n    priority: priorityEd25519PivkeyDisplay,\n    data: (\n      <div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Seed:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(seed)}</div>\n        </div>\n        <div>\n          Pubkey: <Link to={\"#\" + toHex(pubkey)}>{printEllideMiddle(toHex(pubkey), 40)}</Link>\n        </div>\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: readonly {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[],\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeEd25519HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(input: string, coin: HdCoin): Promise<StaticDisplay> {\n  const { number: coinNumber, name: coinName, chainId, codec } = coin;\n\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: {\n    readonly path: string;\n    readonly pubkey: PubkeyBundle;\n    readonly address: Address;\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: readonly Slip10RawIndex[] = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  /* eslint-disable no-shadow */\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  ByteLength64,\n  ByteLength65,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  EthereumAddress,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  LiskAddress,\n  RiseAddress,\n  WeaveCondition,\n  /* eslint-enable no-shadow */\n}\n\nexport const weaveConditionRegex = /^cond:([a-zA-Z]+)\\/([a-zA-Z]+)\\/(([a-fA-F0-9]{2})+)$/;\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set<InputProperties>();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) out.add(InputProperties.ByteLength20);\n    if (rawData.length === 32) out.add(InputProperties.ByteLength32);\n    if (rawData.length === 64) out.add(InputProperties.ByteLength64);\n    if (rawData.length === 65) out.add(InputProperties.ByteLength65);\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // TODO: update min length to 3 starting with weave 0.21\n  if (input.match(/^[a-z0-9.\\-_]{1,64}\\*iov$/)) {\n    out.add(InputProperties.BnsUsername);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  if (ethereumCodec.isValidAddress(input)) {\n    out.add(InputProperties.EthereumAddress);\n  }\n\n  if (input.match(weaveConditionRegex)) {\n    out.add(InputProperties.WeaveCondition);\n  }\n\n  return out;\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nexport interface HdCoin {\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}\n\nexport const iovChainIds = {\n  testnet: \"iov-lovenet\" as ChainId, // Any testnet is okay here. Used for address calculation only\n  mainnet: \"iov-mainnet\" as ChainId,\n};\n\nconst iovDevnets: readonly NetworkSettings[] =\n  process.env.NODE_ENV === \"development\"\n    ? [\n        {\n          name: \"Devnet\",\n          url: \"http://localhost:23456/\",\n        },\n      ]\n    : [];\n\nexport const iovTestnets: readonly NetworkSettings[] = [\n  {\n    name: \"Babynet 👶\",\n    url: \"https://rpc-private-a-vip-babynet.iov.one\",\n  },\n  ...iovDevnets,\n];\n\nexport const liskNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nexport const riseNetworks: readonly NetworkSettings[] = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nexport const accountBasedSlip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nexport const secp256k1Slip10HdCoins: readonly HdCoin[] = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n","import { buildCondition, conditionToAddress } from \"@iov/bns\";\nimport { Encoding } from \"@iov/encoding\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { weaveConditionRegex } from \"../interprete\";\nimport { iovChainIds } from \"../settings\";\nimport { priorityWeaveConditionDisplay, StaticDisplay } from \".\";\n\nconst { fromHex, toHex } = Encoding;\n\nexport function makeWeaveConditionDisplay(input: string): StaticDisplay {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const match = input.match(weaveConditionRegex)!;\n  const [, extension, type, hexData] = match;\n  const data = fromHex(hexData);\n\n  const condition = buildCondition(extension, type, data);\n\n  const tiovAddress = conditionToAddress(iovChainIds.testnet, condition);\n  const iovAddress = conditionToAddress(iovChainIds.mainnet, condition);\n  return {\n    id: `${input}#weave-condition`,\n    interpretedAs: \"Weave condition\",\n    priority: priorityWeaveConditionDisplay,\n    data: (\n      <div>\n        Extension: {extension}\n        <br />\n        Type: {type}\n        <br />\n        Data: <Link to={\"#\" + toHex(data)}>{toHex(data)}</Link>\n        <br />\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n","export {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAccountDisplay,\n  makeBnsUsernameDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAccountDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSecp256k1PubkeyDisplay,\n  makeWeaveAddressDisplay,\n} from \"./rest\";\nexport { makeWeaveConditionDisplay } from \"./weaveCondition\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nexport const priorityWeaveConditionDisplay = 10;\n","import {\n  Display,\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAccountDisplay,\n  makeBnsUsernameDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PrivkeyDisplay,\n  makeEd25519PubkeyDisplay,\n  makeEthereumAddressDisplay,\n  makeHexDisplay,\n  makeLiskAccountDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAccountDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSecp256k1PubkeyDisplay,\n  makeWeaveAddressDisplay,\n  makeWeaveConditionDisplay,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\nimport {\n  accountBasedSlip10HdCoins,\n  iovTestnets,\n  liskNetworks,\n  riseNetworks,\n  secp256k1Slip10HdCoins,\n} from \"./settings\";\n\nexport async function processInput(input: string): Promise<readonly Display[]> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsUsernameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeEd25519HdWalletDisplay(normalizedInput, hdCoin));\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(await makeSecp256k1HdWalletDisplay(normalizedInput, hdCoin));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength64)) {\n      out.push(makeEd25519PrivkeyDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength65) && normalizedInput.startsWith(\"04\")) {\n      out.push(makeSecp256k1PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAccountDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EthereumAddress)) {\n    out.push(makeEthereumAddressDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.WeaveCondition)) {\n    out.push(makeWeaveConditionDisplay(normalizedInput));\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import \"./App.css\";\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { isInteractiveDisplay, StaticDisplay } from \"./displays\";\nimport { processInput } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: readonly StaticDisplay[];\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  public constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      const query = decodeURIComponent(hashQuery);\n      this.handleQuery(query);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = (): void => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}