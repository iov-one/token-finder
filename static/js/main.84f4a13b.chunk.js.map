{"version":3,"sources":["interprete.ts","bcphelpers.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["InputProperties","interprete","input","out","Set","rawData","Encoding","fromHex","add","Hex","length","ByteLength20","ByteLength32","_unused","data","Bech32","decode","prefix","IovAddressMainnet","IovAddressTestnet","_unused2","mnemonic","EnglishMnemonic","Bip39","EnglishMnemonic12Words","_unused3","match","BnsUsername","BnsBlockchain","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","toHex","bcpConnections","Map","makeBnsAccountDisplay","id","priority","interpretedAs","query","network","getData","_getData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","this","apply","arguments","renderData","_response$data$","address","balance","name","react_default","createElement","Link","to","map","join","className","makeBnsAddressDisplay","makeBnsNameDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","_response$data$2","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","_response$data$3","makeBech32Display","parsed","makeHexDisplay","inputData","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEd25519PubkeyDisplay","pubkey","algo","Algorithm","Ed25519","bnsAddress","bnsCodec","keyToAddress","liskAddress","riseAddress","makeHdWalletDisplay","_x2","_x3","_x4","_x5","_makeHdWalletDisplay","_callee5","coinNumber","coinName","codec","wallet","addresses","_path2","_address5","rows","_context5","Ed25519HdWallet","fromMnemonic","path","Slip10RawIndex","hardened","createIdentity","push","key","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee6","_context6","t0","passphraseToKeypair","t1","makeBip39MnemonicDisplay","wordCount","entropy","Error","isInteractiveDisplay","display","iovTestnets","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","processInput","_x","_processInput","properties","_i","_i2","_network","_i3","hdCoin","_i4","_network2","_i5","_network3","Array","call","t2","t3","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","updatedDisplay","list","x","index","findIndex","i","setState","e","newValue","target","value","allStatic","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_iterator2","filter","_iteratorNormalCompletion2","_step2","_loop","listItems","type","placeholder","onChange","autoFocus","readOnly","disabled","window","href","encodeURIComponent","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.84f4a13b.chunk.js","sourcesContent":["import { Bech32, Encoding } from \"@iov/encoding\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\nimport { EnglishMnemonic, Bip39 } from \"@iov/crypto\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  BnsBlockchain,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length*8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9\\.,\\+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsUsername);\n    out.add(InputProperties.BnsBlockchain);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  return out;\n}\n","import { Amount } from \"@iov/bcp-types\";\n\nimport leftPad from \"left-pad\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\"\n  );\n  const trimmedFractional = fractional.replace(/0+$/, '') || \"0\";\n  return `${whole}.${trimmedFractional} ${amount.tokenTicker}`;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { BnsConnection, bnsCodec } from \"@iov/bns\";\nimport { Address, BcpQueryEnvelope, BcpAccount, BcpAccountQuery, BcpConnection, TxCodec } from \"@iov/bcp-types\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\nimport { liskCodec, LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { riseCodec, RiseConnection } from \"@iov/rise\";\n\nimport { printAmount } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { PublicKeyBundle, Algorithm, PublicKeyBytes } from '@iov/base-types';\nimport { EnglishMnemonic, Bip39, Slip10RawIndex } from '@iov/crypto';\n\nconst { toHex } = Encoding;\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nconst bcpConnections = new Map<string, Promise<BcpConnection>>();\n\nfunction makeBnsAccountDisplay(id: string, priority: number, interpretedAs: string, query: BcpAccountQuery, network: NetworkSettings): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await (bcpConnections.get(network.url)!);\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, balance, name } = response.data[0];\n        data = <div>\n          Address: <Link to={\"#\" + address}>{address}</Link><br />\n          Name: {name ? <Link to={\"#\" + name}>{name}</Link> : \"<none>\"}<br />\n          Balance: {balance.map(printAmount).join(\", \")}\n        </div>\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data }\n    }\n  }\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const priority = 9;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(id, priority, interpretedAs, { address: input as Address }, network);\n}\n\nexport function makeBnsNameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-name`;\n  const priority = 11;\n  const interpretedAs = `Name on ${network.name}`;\n  return makeBnsAccountDisplay(id, priority, interpretedAs, { name: input }, network);\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const priority = 10;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await (bcpConnections.get(network.url)!);\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, balance, name } = response.data[0];\n        data = <div>\n          Address: <Link to={\"#\" + address}>{address}</Link><br />\n          Balance: {balance.map(printAmount).join(\", \")}\n        </div>\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data }\n    }\n  }\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const priority = 10;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await (bcpConnections.get(network.url)!);\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, balance, name } = response.data[0];\n        data = <div>\n          Address: <Link to={\"#\" + address}>{address}</Link><br />\n          Balance: {balance.map(printAmount).join(\", \")}\n        </div>\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data }\n    }\n  }\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: 10,\n    data: <div>\n      Prefix: {parsed.prefix}<br />\n      Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n    </div>,\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: 20,\n    data: <div>\n      Length: {inputData.length} bytes<br />\n      <div className=\"pair\">\n        <div className=\"pair-key\">Lower:&nbsp;</div>\n        <div className=\"pair-value\"><pre>{input.toLowerCase()}</pre></div>\n      </div>\n      <div className=\"pair\">\n        <div className=\"pair-key\">Upper:&nbsp;</div>\n        <div className=\"pair-value\"><pre>{input.toUpperCase()}</pre></div>\n      </div>\n    </div>,\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: 10,\n    data: <div>\n      IOV test: <Link to={'#' + tiovAddress}>{tiovAddress}</Link><br />\n      IOV main: <Link to={'#' + iovAddress}>{iovAddress}</Link>\n    </div>,\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PublicKeyBytes,\n  }\n\n  const bnsAddress = bnsCodec.keyToAddress(pubkey);\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: 7,\n    data: <div>\n      BNS: <Link to={'#' + bnsAddress}>{bnsAddress}</Link><br />\n      Lisk: <Link to={'#' + liskAddress}>{liskAddress}</Link><br />\n      Rise: <Link to={'#' + riseAddress}>{riseAddress}</Link><br />\n    </div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  const addresses: {\n    path: string,\n    address: Address,\n  }[] = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = bnsCodec.keyToAddress(pubkey);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      address: address\n    });\n  }\n\n  const rows = addresses.map(a => <div key={a.path}>\n    <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{a.address}</Link>\n  </div>);\n\n  return {\n    id: `${input}#hd-wallet-simple-address`,\n    interpretedAs: `Simple Address HD Wallet`,\n    priority: 8,\n    data: <div>\n      {rows}\n    </div>,\n  };\n}\n\nexport async function makeHdWalletDisplay(input: string, coinNumber: number, coinName: string, codec: TxCodec): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  const addresses: {\n    path: string,\n    address: Address,\n  }[] = [];\n  for (let a = 0; a < 5; ++a) {\n    const path = [Slip10RawIndex.hardened(44), Slip10RawIndex.hardened(coinNumber), Slip10RawIndex.hardened(a)];\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = codec.keyToAddress(pubkey);\n    addresses.push({\n      path: `44'/${coinNumber}'/${a}'`,\n      address: address\n    });\n  }\n\n  const rows = addresses.map(a => <div key={a.path}>\n    <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{a.address}</Link>\n  </div>);\n\n  return {\n    id: `${input}#hd-wallet-coin${coinNumber}`,\n    interpretedAs: `${coinName} HD Wallet`,\n    priority: 8,\n    data: <div>\n      {rows}\n    </div>,\n  };\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: (await passphraseToKeypair(input)).pubkey as PublicKeyBytes,\n  }\n\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: 7,\n    data: <div>\n      Lisk: <Link to={'#' + liskAddress}>{liskAddress}</Link><br />\n      Rise: <Link to={'#' + riseAddress}>{riseAddress}</Link><br />\n    </div>,\n  };\n\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: 11,\n    data: <div>\n      Words: {wordCount}<br />\n      ENT: {entropy.length*8}<br />\n      <div className=\"pair\">\n        <div className=\"pair-key\">Entropy:&nbsp;</div>\n        <div className=\"pair-value\"><pre>{toHex(entropy)}</pre></div>\n      </div>\n    </div>,\n  };\n}\n","import { TxCodec } from \"@iov/bcp-types\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nimport { interprete, InputProperties } from \"./interprete\";\nimport {\n  makeBnsAddressDisplay,\n  NetworkSettings,\n  makeBech32Display,\n  makeHexDisplay,\n  makeWeaveAddressDisplay,\n  makeBnsNameDisplay,\n  makeEd25519PubkeyDisplay,\n  makeLiskAddressDisplay,\n  makeRiseAddressDisplay,\n  makeBip39MnemonicDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeHdWalletDisplay\n} from './displays';\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<object>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return typeof (display as InteractiveDisplay).getData === \"function\"\n    && typeof (display as InteractiveDisplay).renderData === \"function\";\n}\n\nconst iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Yaknet (bnsd)\",\n    url: \"https://bns.yaknet.iov.one\",\n  },\n  {\n    name: \"Yaknet (bcpd)\",\n    url: \"https://bov.yaknet.iov.one\",\n  },\n  {\n    name: \"Xerusnet (bnsd)\",\n    url: \"https://bns.xerusnet.iov.one\",\n  },\n  {\n    name: \"Xerusnet (bcpd)\",\n    url: \"https://bov.xerusnet.iov.one\",\n  }\n];\n\nconst liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nconst riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nconst accountBasedSlip10HdCoins: ReadonlyArray<{\n  readonly name: string,\n  readonly number: number,\n  readonly codec: TxCodec,\n}> = [\n  // {\n  //   name: \"IOV\",\n  //   number: 234,\n  //   codec: bnsCodec,\n  // },\n  {\n    name: \"Lisk\",\n    number: 134,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    codec: riseCodec,\n  },\n]\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const properties = interprete(input);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(input, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsNameDisplay(input, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(input));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeHdWalletDisplay(input, hdCoin.number, hdCoin.name, hdCoin.codec));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(input));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(input));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(input));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(input));\n    }\n    out.push(makeHexDisplay(input));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(input, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(input, network));\n    }\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { processInput, StaticDisplay, isInteractiveDisplay } from './inputprocessing';\nimport './App.css';\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor (props: TestProps){\n    super(props);\n    this.state = {\n      input: '',\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  updateDisplay(updatedDisplay: StaticDisplay) {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id == updatedDisplay.id);\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    })\n  }\n  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = e.target.value\n    console.log('handle change called', newValue);\n    this.handleQuery(newValue);\n  }\n\n  async handleQuery(newValue: string) {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          data: <div>Loading ...</div>,\n        }\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay.getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n  render() {\n\n    const listItems = this.state ?\n      this.state.display.map((display) =>\n        <div key={display.id} className=\"display\">\n          <div className=\"display-title\">{display.interpretedAs}</div>\n          <div className=\"display-data\">{display.data}</div>\n        </div>\n        )\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input className=\"maininput\" type=\"text\"\n            placeholder=\"Insert address as hex or bech32\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus />\n          <div className=\"display-container\">\n            <div className=\"pair\">\n              <div className=\"pair-key\"><small>Direct link:&nbsp;</small></div>\n              <div className=\"pair-value\">\n                <input type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true} disabled={true}\n                  value={`${window.location.href.replace(/#.*/, '')}#${encodeURIComponent(this.state.input)}`}\n                  />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className=\"display-container\">\n            <p className=\"description\">interpreted as</p>\n            { listItems }\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Route } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter>\n  <Route path=\"/\" component={App} />\n</BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}