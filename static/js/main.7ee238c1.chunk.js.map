{"version":3,"sources":["bcphelpers.ts","interprete.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","InputProperties","toHex","Encoding","bcpConnections","Map","ellideMiddle","str","maxOutLen","length","frontLen","Math","ceil","tailLen","floor","makeBnsAccountDisplay","id","priority","interpretedAs","query","network","getData","_getData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","this","apply","arguments","renderData","data","_response$data$","address","pubkey","balance","name","hexPubkey","undefined","react_default","createElement","Link","to","className","map","join","makeBnsAddressDisplay","input","makeBnsNameDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","_response$data$2","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","_response$data$3","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","fromHex","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEd25519PubkeyDisplay","algo","Algorithm","Ed25519","bnsAddress","bnsCodec","keyToAddress","liskAddress","liskCodec","riseAddress","riseCodec","makeAddressesDisplay","addresses","rows","key","path","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee4","wallet","index","_path","_pubkey4","_address4","_context4","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","push","makeHdWalletDisplay","_x2","_x3","_x4","_x5","_makeHdWalletDisplay","_callee5","coinNumber","coinName","codec","_path2","_pubkey5","_address5","_context5","Slip10RawIndex","hardened","makeLiskLikePassphraseDisplay","_x6","_makeLiskLikePassphraseDisplay","_callee6","_context6","t0","passphraseToKeypair","t1","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsUsername","BnsBlockchain","isValidAddress","LiskAddress","RiseAddress","isInteractiveDisplay","display","iovTestnets","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","processInput","_processInput","normalizedInput","properties","_i","_i2","_network","_i3","hdCoin","_i4","_network2","_i5","_network3","trim","Array","call","t2","t3","t4","t5","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","value","onChange","autoFocus","readOnly","window","href","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_iterator2","filter","_iteratorNormalCompletion2","_step2","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.7ee238c1.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp-types\";\n\nimport leftPad from \"left-pad\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsUsername,\n  BnsBlockchain,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9\\.,\\+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsUsername);\n    out.add(InputProperties.BnsBlockchain);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  return out;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Algorithm, PublicKeyBundle, PublicKeyBytes } from \"@iov/base-types\";\nimport {\n  Address,\n  BcpAccount,\n  BcpAccountQuery,\n  BcpConnection,\n  BcpQueryEnvelope,\n  TxCodec,\n} from \"@iov/bcp-types\";\nimport { bnsCodec, BnsConnection } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\nimport { liskCodec, LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { riseCodec, RiseConnection } from \"@iov/rise\";\n\nimport { printAmount } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\n\nconst { toHex } = Encoding;\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n}\n\nconst bcpConnections = new Map<string, Promise<BcpConnection>>();\n\nfunction ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: BcpAccountQuery,\n  network: NetworkSettings,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Name</td>\n              <td>{name ? <Link to={\"#\" + name}>{name}</Link> : \"<none>\"}</td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const priority = 9;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(id, priority, interpretedAs, { address: input as Address }, network);\n}\n\nexport function makeBnsNameDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-name`;\n  const priority = 11;\n  const interpretedAs = `Name on ${network.name}`;\n  return makeBnsAccountDisplay(id, priority, interpretedAs, { name: input }, network);\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const priority = 10;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const priority = 10;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priority,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: BcpQueryEnvelope<BcpAccount>) => {\n      let data: JSX.Element;\n      if (response.data.length > 0) {\n        const { address, pubkey, balance, name } = response.data[0];\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>\n                <Link to={\"#\" + address}>{address}</Link>\n              </td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, data };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: 10,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: 20,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: 10,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: Encoding.fromHex(input) as PublicKeyBytes,\n  };\n\n  const bnsAddress = bnsCodec.keyToAddress(pubkey);\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: 7,\n    data: (\n      <div>\n        BNS: <Link to={\"#\" + bnsAddress}>{bnsAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nfunction makeAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }>,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>: <Link to={\"#\" + a.address}>{ellideMiddle(a.address, 21)}</Link>{\" \"}\n      ({a.pubkey.algo}/<Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: 8,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = bnsCodec.keyToAddress(pubkey);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: pubkey,\n      address: address,\n    });\n  }\n\n  return makeAddressesDisplay(`${input}#hd-wallet-simple-address`, `Simple Address HD Wallet`, addresses);\n}\n\nexport async function makeHdWalletDisplay(\n  input: string,\n  coinNumber: number,\n  coinName: string,\n  codec: TxCodec,\n): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const pubkey = (await wallet.createIdentity(path)).pubkey;\n    const address = codec.keyToAddress(pubkey);\n    addresses.push({\n      path: `44'/${coinNumber}'/${a}'`,\n      pubkey: pubkey,\n      address: address,\n    });\n  }\n\n  return makeAddressesDisplay(`${input}#hd-wallet-coin${coinNumber}`, `${coinName} HD Wallet`, addresses);\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const pubkey: PublicKeyBundle = {\n    algo: Algorithm.Ed25519,\n    data: (await passphraseToKeypair(input)).pubkey as PublicKeyBytes,\n  };\n\n  const liskAddress = liskCodec.keyToAddress(pubkey);\n  const riseAddress = riseCodec.keyToAddress(pubkey);\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: 7,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: 11,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { TxCodec } from \"@iov/bcp-types\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nimport {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsNameDisplay,\n  makeEd25519PubkeyDisplay,\n  makeHdWalletDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n  NetworkSettings,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<object>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nconst iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Yaknet (bnsd)\",\n    url: \"https://bns.yaknet.iov.one\",\n  },\n  {\n    name: \"Yaknet (bcpd)\",\n    url: \"https://bov.yaknet.iov.one\",\n  },\n];\n\nconst liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nconst riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nconst accountBasedSlip10HdCoins: ReadonlyArray<{\n  readonly name: string;\n  readonly number: number;\n  readonly codec: TxCodec;\n}> = [\n  {\n    name: \"IOV\",\n    number: 234,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    codec: riseCodec,\n  },\n];\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsername)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsNameDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(await makeHdWalletDisplay(normalizedInput, hdCoin.number, hdCoin.name, hdCoin.codec));\n    }\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => (\n          <div key={display.id} className=\"display\">\n            <div className=\"display-title\">{display.interpretedAs}</div>\n            <div className=\"display-data\">{display.data}</div>\n          </div>\n        ))\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}