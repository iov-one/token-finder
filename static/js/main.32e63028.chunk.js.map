{"version":3,"sources":["bcphelpers.ts","uielements.tsx","interprete.ts","displays.tsx","inputprocessing.tsx","App.tsx","index.tsx"],"names":["narrowNoBreakSpace","printAmount","amount","whole","quantity","slice","fractionalDigits","trimmedFractional","leftPad","replace","concat","tokenTicker","printPath","path","components","map","ri","isHardened","toNumber","Math","pow","join","ellideMiddle","str","maxOutLen","length","frontLen","ceil","tailLen","floor","addressLink","address","react_default","a","createElement","Link","to","InputProperties","toHex","Encoding","priorityEd25519PubkeyDisplay","priorityLiskLikePassphraseDisplay","priorityHdAddressesDisplay","priorityBnsAddressDisplay","priorityLiskAddressDisplay","priorityRiseAddressDisplay","priorityBech32Display","priorityWeaveAddressDisplay","priorityBip39MnemonicDisplay","priorityBnsUsernameNftDisplay","priorityBnsBlockchainNftDisplay","priorityHexDisplay","bcpConnections","Map","bnsConnections","makeBnsAddressDisplay","input","network","id","name","interpretedAs","priority","query","deprecated","arguments","undefined","getData","_getData","Object","asyncToGenerator","regenerator_default","mark","_callee","connection","response","wrap","_context","prev","next","has","url","set","BnsConnection","establish","get","sent","getAccount","abrupt","stop","apply","this","renderData","data","pubkey","balance","hexPubkey","className","makeBnsAccountDisplay","makeLiskAddressDisplay","_getData2","_callee2","_context2","LiskConnection","makeRiseAddressDisplay","_getData3","_callee3","_context3","RiseConnection","makeBnsUsernameNftDisplay","displayId","_getData4","_callee4","_context4","getUsernames","username","_response$","owner","addressElements","addresses","pair","chainId","title","makeBnsBlockchainNftDisplay","_getData5","_callee5","_context5","getBlockchains","_response$2","codecName","codecConfig","makeBech32Display","parsed","Bech32","decode","prefix","makeHexDisplay","inputData","fromHex","toLowerCase","toUpperCase","makeWeaveAddressDisplay","tiovAddress","encode","iovAddress","makeEd25519PubkeyDisplay","ed25519PubkeyBytes","bnsAddress","bnsCodec","identityToAddress","algo","Algorithm","Ed25519","liskAddress","Derivation","pubkeyToAddress","riseAddress","makeHdAddressesDisplay","addressLength","rows","key","makeSimpleAddressDisplay","_x","_makeSimpleAddressDisplay","_callee6","wallet","index","_path","identity","_address4","_context6","Ed25519HdWallet","fromMnemonic","HdPaths","simpleAddress","createIdentity","push","makeEd25519HdWalletDisplay","_x2","_x3","_x4","_x5","_x6","_makeEd25519HdWalletDisplay","_callee7","coinNumber","coinName","codec","_path2","_address5","_context7","Slip10RawIndex","hardened","makeSecp256k1HdWalletDisplay","_x7","_x8","_x9","_x10","_x11","_makeSecp256k1HdWalletDisplay","_callee8","_path3","_address6","_context8","Secp256k1HdWallet","normal","makeLiskLikePassphraseDisplay","_x12","_makeLiskLikePassphraseDisplay","_callee9","_context9","t0","passphraseToKeypair","t1","call","t2","t3","makeBip39MnemonicDisplay","wordCount","mnemonic","EnglishMnemonic","entropy","Bip39","Error","interprete","Set","out","rawData","add","Hex","ByteLength20","ByteLength32","_unused","IovAddressMainnet","IovAddressTestnet","_unused2","EnglishMnemonic12Words","_unused3","match","BnsBlockchainNft","BnsUsernameNft","liskCodec","isValidAddress","LiskAddress","riseCodec","RiseAddress","isInteractiveDisplay","display","iovTestnets","bnsNftSupported","liskNetworks","riseNetworks","accountBasedSlip10HdCoins","number","secp256k1Slip10HdCoins","ethereumCodec","processInput","_processInput","normalizedInput","properties","_i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_network","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_network2","_i2","hdCoin","_i3","_hdCoin","_i4","_network3","_i5","_network4","trim","Array","filter","testnet","Symbol","iterator","done","value","return","finish","t4","t5","t6","t7","t8","t9","sort","b","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","timeouts","state","history","listen","location","action","hashQuery","hash","handleQuery","handleChange","bind","assertThisInitialized","decodeURIComponent","console","log","listItems","type","placeholder","onChange","autoFocus","readOnly","window","href","encodeURIComponent","e","newValue","target","updatedDisplay","list","x","findIndex","i","setState","allStatic","timeout","clearTimeout","interactiveDisplay","_this2","setTimeout","then","catch","error","toString","rendered","updateDisplay","_loop","React","Component","withRouter","ReactDOM","render","BrowserRouter","Route","component","document","getElementById"],"mappings":"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","file":"static/js/main.32e63028.chunk.js","sourcesContent":["import { Amount } from \"@iov/bcp\";\nimport { Slip10RawIndex } from \"@iov/crypto\";\n\nimport leftPad from \"left-pad\";\n\n// Unicode NARROW NO-BREAK SPACE\n// https://www.fileformat.info/info/unicode/char/202f/index.htm\nconst narrowNoBreakSpace = \"\\u202F\";\n\nexport function printAmount(amount: Amount): string {\n  const whole = amount.quantity.slice(0, -amount.fractionalDigits) || \"0\";\n  const fractional = leftPad(\n    amount.quantity.slice(-amount.fractionalDigits) || \"0\",\n    amount.fractionalDigits,\n    \"0\",\n  );\n  const trimmedFractional = fractional.replace(/0+$/, \"\") || \"0\";\n  return `${whole}.${trimmedFractional}${narrowNoBreakSpace}${amount.tokenTicker}`;\n}\n\nexport function printPath(path: ReadonlyArray<Slip10RawIndex>): string {\n  const components = path.map(ri => (ri.isHardened() ? `${ri.toNumber() - 2 ** 31}'` : `${ri.toNumber()}`));\n  return `m/${components.join(\"/\")}`;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Address } from \"@iov/bcp\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\nexport function addressLink(address: Address): JSX.Element {\n  return <Link to={\"#\" + address}>{ellideMiddle(address, 25)}</Link>;\n}\n\nexport function printEllideMiddle(str: string, maxOutLen: number): JSX.Element {\n  return <span title={str}>{ellideMiddle(str, maxOutLen)}</span>;\n}\n","import { Bip39, EnglishMnemonic } from \"@iov/crypto\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nexport enum InputProperties {\n  Hex,\n  Bech32,\n  ByteLength20,\n  ByteLength32,\n  EnglishMnemonic,\n  EnglishMnemonic12Words,\n  IovAddressMainnet,\n  IovAddressTestnet,\n  BnsBlockchainNft,\n  BnsUsernameNft,\n  LiskAddress,\n  RiseAddress,\n}\n\nexport function interprete(input: string): ReadonlySet<InputProperties> {\n  if (input.length === 0) {\n    return new Set();\n  }\n\n  const out = new Set();\n\n  try {\n    const rawData = Encoding.fromHex(input);\n    out.add(InputProperties.Hex);\n    if (rawData.length === 20) {\n      out.add(InputProperties.ByteLength20);\n    }\n    if (rawData.length === 32) {\n      out.add(InputProperties.ByteLength32);\n    }\n  } catch {}\n\n  try {\n    const data = Bech32.decode(input);\n    out.add(InputProperties.Bech32);\n    if (data.prefix === \"iov\") {\n      out.add(InputProperties.IovAddressMainnet);\n    }\n    if (data.prefix === \"tiov\") {\n      out.add(InputProperties.IovAddressTestnet);\n    }\n  } catch {}\n\n  try {\n    const mnemonic = new EnglishMnemonic(input);\n    out.add(InputProperties.EnglishMnemonic);\n    const entropy = Bip39.decode(mnemonic);\n    if (entropy.length * 8 === 128) {\n      out.add(InputProperties.EnglishMnemonic12Words);\n    }\n  } catch {}\n\n  // https://github.com/iov-one/weave/blob/v0.9.3/x/nft/username/msg.go#L19\n  if (input.match(/^[a-z0-9\\.,\\+\\-_@]{4,64}$/)) {\n    out.add(InputProperties.BnsBlockchainNft);\n    out.add(InputProperties.BnsUsernameNft);\n  }\n\n  if (liskCodec.isValidAddress(input)) {\n    out.add(InputProperties.LiskAddress);\n  }\n\n  if (riseCodec.isValidAddress(input)) {\n    out.add(InputProperties.RiseAddress);\n  }\n\n  return out;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Account,\n  AccountQuery,\n  Address,\n  Algorithm,\n  BcpConnection,\n  ChainId,\n  PublicKeyBundle,\n  PublicKeyBytes,\n  TxCodec,\n} from \"@iov/bcp\";\nimport { BnsBlockchainNft, bnsCodec, BnsConnection, BnsUsernameNft } from \"@iov/bns\";\nimport { Bip39, EnglishMnemonic, Slip10RawIndex } from \"@iov/crypto\";\nimport { Derivation } from \"@iov/dpos\";\nimport { Bech32, Encoding } from \"@iov/encoding\";\nimport { Ed25519HdWallet, HdPaths, Secp256k1HdWallet } from \"@iov/keycontrol\";\nimport { LiskConnection, passphraseToKeypair } from \"@iov/lisk\";\nimport { RiseConnection } from \"@iov/rise\";\n\nimport { printAmount, printPath } from \"./bcphelpers\";\nimport { InteractiveDisplay, StaticDisplay } from \"./inputprocessing\";\nimport { addressLink, ellideMiddle, printEllideMiddle } from \"./uielements\";\n\nconst { toHex } = Encoding;\n\nexport interface NetworkSettings {\n  readonly name: string;\n  readonly url: string;\n  readonly bnsNftSupported?: boolean;\n}\n\nconst priorityEd25519PubkeyDisplay = 7;\nconst priorityLiskLikePassphraseDisplay = 7;\nconst priorityHdAddressesDisplay = 8;\nconst priorityBnsAddressDisplay = 9;\nconst priorityLiskAddressDisplay = 10;\nconst priorityRiseAddressDisplay = 10;\nconst priorityBech32Display = 10;\nconst priorityWeaveAddressDisplay = 10;\nconst priorityBip39MnemonicDisplay = 11;\nconst priorityBnsUsernameNftDisplay = 15;\nconst priorityBnsBlockchainNftDisplay = 16;\nconst priorityHexDisplay = 20;\n\nconst bcpConnections = new Map<string, Promise<BcpConnection>>();\nconst bnsConnections = new Map<string, Promise<BnsConnection>>();\n\nfunction makeBnsAccountDisplay(\n  id: string,\n  priority: number,\n  interpretedAs: string,\n  query: AccountQuery,\n  network: NetworkSettings,\n  deprecated: boolean = false,\n): InteractiveDisplay {\n  return {\n    id: id,\n    priority: priority,\n    deprecated: deprecated,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getAccount(query);\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Address</td>\n                <td>{addressLink(address)}</td>\n              </tr>\n              <tr>\n                <td>Pubkey</td>\n                <td className=\"breakall\">\n                  {hexPubkey ? (\n                    <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                  ) : (\n                    <span className=\"inactive\">not available</span>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <td>Balance</td>\n                <td>{balance.map(printAmount).join(\", \")}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return { id, interpretedAs, priority, deprecated, data };\n    },\n  };\n}\n\nexport function makeBnsAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-bns-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return makeBnsAccountDisplay(\n    id,\n    priorityBnsAddressDisplay,\n    interpretedAs,\n    { address: input as Address },\n    network,\n  );\n}\n\nexport function makeLiskAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-lisk-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityLiskAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, LiskConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        interpretedAs: interpretedAs,\n        priority: priorityLiskAddressDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeRiseAddressDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const id = `${input}#${network.name}-rise-address`;\n  const interpretedAs = `Address on ${network.name}`;\n  return {\n    id: id,\n    priority: priorityRiseAddressDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bcpConnections.has(network.url)) {\n        bcpConnections.set(network.url, RiseConnection.establish(network.url));\n      }\n      const connection = await bcpConnections.get(network.url)!;\n      const response = await connection.getAccount({ address: input as Address });\n      return response;\n    },\n    renderData: (response: Account | undefined) => {\n      let data: JSX.Element;\n      if (response) {\n        const { address, pubkey, balance } = response;\n        const hexPubkey = pubkey ? toHex(pubkey.data) : undefined;\n        data = (\n          <table>\n            <tr>\n              <td>Address</td>\n              <td>{addressLink(address)}</td>\n            </tr>\n            <tr>\n              <td>Pubkey</td>\n              <td className=\"breakall\">\n                {hexPubkey ? (\n                  <Link to={\"#\" + hexPubkey}>{hexPubkey}</Link>\n                ) : (\n                  <span className=\"inactive\">not available</span>\n                )}\n              </td>\n            </tr>\n            <tr>\n              <td>Balance</td>\n              <td>{balance.map(printAmount).join(\", \")}</td>\n            </tr>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">Account not found</span>;\n      }\n      return {\n        id: id,\n        priority: priorityRiseAddressDisplay,\n        interpretedAs: interpretedAs,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsUsernameNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-username-nft`;\n  const interpretedAs = `Username NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsUsernameNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getUsernames({ username: input });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsUsernameNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, addresses } = response[0];\n        const addressElements = addresses.map(pair => (\n          <span>\n            {printEllideMiddle(pair.chainId, 12)}: {addressLink(pair.address)}\n            <br />\n          </span>\n        ));\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Addresses</td>\n                <td>{addressElements}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBnsBlockchainNftDisplay(input: string, network: NetworkSettings): InteractiveDisplay {\n  const displayId = `${input}#${network.name}-blockchain-nft`;\n  const interpretedAs = `Blockchain NFT on ${network.name}`;\n  return {\n    id: displayId,\n    priority: priorityBnsBlockchainNftDisplay,\n    interpretedAs: interpretedAs,\n    getData: async () => {\n      if (!bnsConnections.has(network.url)) {\n        bnsConnections.set(network.url, BnsConnection.establish(network.url));\n      }\n      const connection = await bnsConnections.get(network.url)!;\n      const response = await connection.getBlockchains({ chainId: input as ChainId });\n      return response;\n    },\n    renderData: (response: ReadonlyArray<BnsBlockchainNft>) => {\n      let data: JSX.Element;\n      if (response.length > 0) {\n        const { id, owner, codecName, codecConfig } = response[0];\n        data = (\n          <table>\n            <tbody>\n              <tr>\n                <td>Name</td>\n                <td>\n                  <Link to={\"#\" + id}>{id}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Owner</td>\n                <td>\n                  <Link to={\"#\" + owner}>{owner}</Link>\n                </td>\n              </tr>\n              <tr>\n                <td>Codec</td>\n                <td>{codecName}</td>\n              </tr>\n              <tr>\n                <td>Codec config</td>\n                <td>{codecConfig}</td>\n              </tr>\n            </tbody>\n          </table>\n        );\n      } else {\n        data = <span className=\"inactive\">NFT not found</span>;\n      }\n      return {\n        id: displayId,\n        interpretedAs: interpretedAs,\n        priority: priorityBnsUsernameNftDisplay,\n        data: data,\n      };\n    },\n  };\n}\n\nexport function makeBech32Display(input: string): StaticDisplay {\n  const parsed = Bech32.decode(input);\n  return {\n    id: `${input}#bech32`,\n    interpretedAs: \"Bech32 address\",\n    priority: priorityBech32Display,\n    data: (\n      <div>\n        Prefix: {parsed.prefix}\n        <br />\n        Data: <Link to={\"#\" + toHex(parsed.data)}>{toHex(parsed.data)}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeHexDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  return {\n    id: `${input}#hex-summary`,\n    interpretedAs: \"Hex data summary\",\n    priority: priorityHexDisplay,\n    data: (\n      <div>\n        Length: {inputData.length} bytes\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Lower:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toLowerCase()}</div>\n        </div>\n        <div className=\"pair\">\n          <div className=\"pair-key\">Upper:&nbsp;</div>\n          <div className=\"pair-value data\">{input.toUpperCase()}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n\nexport function makeWeaveAddressDisplay(input: string): StaticDisplay {\n  const inputData = Encoding.fromHex(input);\n  const tiovAddress = Bech32.encode(\"tiov\", inputData);\n  const iovAddress = Bech32.encode(\"iov\", inputData);\n  return {\n    id: `${input}#weave-address`,\n    interpretedAs: \"Weave address\",\n    priority: priorityWeaveAddressDisplay,\n    data: (\n      <div>\n        IOV test: <Link to={\"#\" + tiovAddress}>{tiovAddress}</Link>\n        <br />\n        IOV main: <Link to={\"#\" + iovAddress}>{iovAddress}</Link>\n      </div>\n    ),\n  };\n}\n\nexport function makeEd25519PubkeyDisplay(input: string): StaticDisplay {\n  const ed25519PubkeyBytes = Encoding.fromHex(input) as PublicKeyBytes;\n\n  const bnsAddress = bnsCodec.identityToAddress({\n    chainId: \"some-testnet\" as ChainId,\n    pubkey: {\n      algo: Algorithm.Ed25519,\n      data: ed25519PubkeyBytes,\n    },\n  });\n  const liskAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress(ed25519PubkeyBytes, \"R\");\n\n  return {\n    id: `${input}#ed25519-pubkey`,\n    interpretedAs: \"Ed25519 public key\",\n    priority: priorityEd25519PubkeyDisplay,\n    data: (\n      <div>\n        BNS: <Link to={\"#\" + bnsAddress}>{bnsAddress}</Link>\n        <br />\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nfunction makeHdAddressesDisplay(\n  id: string,\n  interpretedAs: string,\n  addresses: ReadonlyArray<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }>,\n  addressLength: number,\n  deprecated?: boolean,\n): StaticDisplay {\n  const rows = addresses.map(a => (\n    <div key={a.path}>\n      <span className=\"mono\">{a.path}</span>:{\" \"}\n      <Link to={\"#\" + a.address}>{ellideMiddle(a.address, addressLength)}</Link> ({a.pubkey.algo}/\n      <Link to={\"#\" + toHex(a.pubkey.data)}>{ellideMiddle(toHex(a.pubkey.data), 5)}</Link>)\n    </div>\n  ));\n\n  return {\n    id: id,\n    interpretedAs: interpretedAs,\n    priority: priorityHdAddressesDisplay,\n    deprecated: deprecated,\n    data: <div>{rows}</div>,\n  };\n}\n\nexport async function makeSimpleAddressDisplay(input: string): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // any testnet leads to \"tiov\" prefixes\n  const chainId = \"some-testnet\" as ChainId;\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let index = 0; index < 5; ++index) {\n    const path = HdPaths.simpleAddress(index);\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = bnsCodec.identityToAddress(identity);\n    addresses.push({\n      path: `4804438'/${index}'`,\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-simple-address`,\n    `Simple Address HD Wallet`,\n    addresses,\n    21,\n    true,\n  );\n}\n\nexport async function makeEd25519HdWalletDisplay(\n  input: string,\n  coinNumber: number,\n  coinName: string,\n  chainId: ChainId,\n  codec: TxCodec,\n): Promise<StaticDisplay> {\n  const wallet = Ed25519HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    21,\n  );\n}\n\nexport async function makeSecp256k1HdWalletDisplay(\n  input: string,\n  coinNumber: number,\n  coinName: string,\n  chainId: ChainId,\n  codec: TxCodec,\n): Promise<StaticDisplay> {\n  const wallet = Secp256k1HdWallet.fromMnemonic(input);\n\n  // tslint:disable-next-line:readonly-array\n  const addresses: Array<{\n    readonly path: string;\n    readonly pubkey: PublicKeyBundle;\n    readonly address: Address;\n  }> = [];\n  for (let a = 0; a < 5; ++a) {\n    const path: ReadonlyArray<Slip10RawIndex> = [\n      Slip10RawIndex.hardened(44),\n      Slip10RawIndex.hardened(coinNumber),\n      Slip10RawIndex.hardened(0),\n      Slip10RawIndex.normal(0),\n      Slip10RawIndex.normal(a),\n    ];\n    const identity = await wallet.createIdentity(chainId, path);\n    const address = codec.identityToAddress(identity);\n    addresses.push({\n      path: printPath(path),\n      pubkey: identity.pubkey,\n      address: address,\n    });\n  }\n\n  return makeHdAddressesDisplay(\n    `${input}#hd-wallet-coin${coinNumber}`,\n    `${coinName} HD Wallet`,\n    addresses,\n    16,\n  );\n}\n\nexport async function makeLiskLikePassphraseDisplay(input: string): Promise<StaticDisplay> {\n  const liskAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"L\");\n  const riseAddress = Derivation.pubkeyToAddress((await passphraseToKeypair(input)).pubkey, \"R\");\n\n  return {\n    id: `${input}#lisk-like-passphrase`,\n    interpretedAs: \"Lisk-like passphrase\",\n    priority: priorityLiskLikePassphraseDisplay,\n    data: (\n      <div>\n        Lisk: <Link to={\"#\" + liskAddress}>{liskAddress}</Link>\n        <br />\n        Rise: <Link to={\"#\" + riseAddress}>{riseAddress}</Link>\n        <br />\n      </div>\n    ),\n  };\n}\n\nexport function makeBip39MnemonicDisplay(input: string): StaticDisplay {\n  const mnemonic = new EnglishMnemonic(input);\n  const entropy = Bip39.decode(mnemonic);\n\n  let wordCount: number;\n  switch (entropy.length * 8) {\n    case 128:\n      wordCount = 12;\n      break;\n    case 160:\n      wordCount = 15;\n      break;\n    case 192:\n      wordCount = 18;\n      break;\n    case 224:\n      wordCount = 21;\n      break;\n    case 256:\n      wordCount = 24;\n      break;\n    default:\n      throw new Error(\"Unsupported entropy length\");\n  }\n\n  return {\n    id: `${input}#bip39-english-mnemonic`,\n    interpretedAs: \"Bip39 english mnemonic\",\n    priority: priorityBip39MnemonicDisplay,\n    data: (\n      <div>\n        Words: {wordCount}\n        <br />\n        ENT: {entropy.length * 8}\n        <br />\n        <div className=\"pair\">\n          <div className=\"pair-key\">Entropy:&nbsp;</div>\n          <div className=\"pair-value data\">{toHex(entropy)}</div>\n        </div>\n      </div>\n    ),\n  };\n}\n","import { ChainId, TxCodec } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { ethereumCodec } from \"@iov/ethereum\";\nimport { liskCodec } from \"@iov/lisk\";\nimport { riseCodec } from \"@iov/rise\";\n\nimport {\n  makeBech32Display,\n  makeBip39MnemonicDisplay,\n  makeBnsAddressDisplay,\n  makeBnsBlockchainNftDisplay,\n  makeBnsUsernameNftDisplay,\n  makeEd25519HdWalletDisplay,\n  makeEd25519PubkeyDisplay,\n  makeHexDisplay,\n  makeLiskAddressDisplay,\n  makeLiskLikePassphraseDisplay,\n  makeRiseAddressDisplay,\n  makeSecp256k1HdWalletDisplay,\n  makeSimpleAddressDisplay,\n  makeWeaveAddressDisplay,\n  NetworkSettings,\n} from \"./displays\";\nimport { InputProperties, interprete } from \"./interprete\";\n\nexport interface StaticDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly data: JSX.Element;\n}\n\nexport interface InteractiveDisplay {\n  readonly id: string;\n  readonly priority: number;\n  readonly deprecated?: boolean;\n  readonly interpretedAs: string;\n  readonly getData: () => Promise<any>;\n  readonly renderData: (data: any) => StaticDisplay;\n}\n\nexport type Display = StaticDisplay | InteractiveDisplay;\n\nexport function isInteractiveDisplay(display: Display): display is InteractiveDisplay {\n  return (\n    typeof (display as InteractiveDisplay).getData === \"function\" &&\n    typeof (display as InteractiveDisplay).renderData === \"function\"\n  );\n}\n\nconst iovTestnets: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Hugnet (bnsd)\",\n    url: \"https://bns.hugnet.iov.one\",\n    bnsNftSupported: true,\n  },\n  {\n    name: \"Hugnet (bcpd)\",\n    url: \"https://bov.hugnet.iov.one\",\n  },\n];\n\nconst liskNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"Lisk Testnet\",\n    url: \"https://testnet.lisk.io\",\n  },\n  {\n    name: \"Lisk Mainnet\",\n    url: \"https://hub32.lisk.io\",\n  },\n];\n\nconst riseNetworks: ReadonlyArray<NetworkSettings> = [\n  {\n    name: \"RISE Testnet\",\n    url: \"https://twallet.rise.vision\",\n  },\n  {\n    name: \"RISE Mainnet\",\n    url: \"https://wallet.rise.vision\",\n  },\n];\n\nconst accountBasedSlip10HdCoins: ReadonlyArray<{\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}> = [\n  {\n    name: \"IOV\",\n    number: 234,\n    // any testnet leads to \"tiov\" prefixes\n    chainId: \"some-testnet\" as ChainId,\n    codec: bnsCodec,\n  },\n  {\n    name: \"Lisk\",\n    number: 134,\n    // https://github.com/prolina-foundation/lisk-wiki/blob/master/Networks.md#mainnet\n    chainId: \"ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511\" as ChainId,\n    codec: liskCodec,\n  },\n  {\n    name: \"RISE\",\n    number: 1120,\n    // https://github.com/RiseVision/rise-node/blob/master/etc/mainnet/config.json\n    chainId: \"cd8171332c012514864edd8eb6f68fc3ea6cb2afbaf21c56e12751022684cea5\" as ChainId,\n    codec: riseCodec,\n  },\n];\n\nconst secp256k1Slip10HdCoins: ReadonlyArray<{\n  readonly name: string;\n  readonly number: number;\n  readonly chainId: ChainId;\n  readonly codec: TxCodec;\n}> = [\n  {\n    name: \"Ethereum\",\n    number: 60,\n    // all Ethereum networks use the same addresses\n    chainId: \"ethereum-eip155-0\" as ChainId,\n    codec: ethereumCodec,\n  },\n];\n\nexport async function processInput(input: string): Promise<ReadonlyArray<Display>> {\n  const normalizedInput = input.trim();\n\n  const properties = interprete(normalizedInput);\n\n  const out = new Array<Display>();\n\n  if (properties.has(InputProperties.IovAddressTestnet)) {\n    for (const network of iovTestnets) {\n      out.push(makeBnsAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsUsernameNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsUsernameNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.BnsBlockchainNft)) {\n    for (const network of iovTestnets.filter(testnet => !!testnet.bnsNftSupported)) {\n      out.push(makeBnsBlockchainNftDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.EnglishMnemonic)) {\n    out.push(makeBip39MnemonicDisplay(normalizedInput));\n\n    for (const hdCoin of accountBasedSlip10HdCoins) {\n      out.push(\n        await makeEd25519HdWalletDisplay(\n          normalizedInput,\n          hdCoin.number,\n          hdCoin.name,\n          hdCoin.chainId,\n          hdCoin.codec,\n        ),\n      );\n    }\n    for (const hdCoin of secp256k1Slip10HdCoins) {\n      out.push(\n        await makeSecp256k1HdWalletDisplay(\n          normalizedInput,\n          hdCoin.number,\n          hdCoin.name,\n          hdCoin.chainId,\n          hdCoin.codec,\n        ),\n      );\n    }\n    out.push(await makeSimpleAddressDisplay(normalizedInput));\n\n    if (properties.has(InputProperties.EnglishMnemonic12Words)) {\n      out.push(await makeLiskLikePassphraseDisplay(normalizedInput));\n    }\n  }\n\n  if (properties.has(InputProperties.Bech32)) {\n    out.push(makeBech32Display(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.Hex)) {\n    if (properties.has(InputProperties.ByteLength20)) {\n      out.push(makeWeaveAddressDisplay(normalizedInput));\n    }\n    if (properties.has(InputProperties.ByteLength32)) {\n      out.push(makeEd25519PubkeyDisplay(normalizedInput));\n    }\n    out.push(makeHexDisplay(normalizedInput));\n  }\n\n  if (properties.has(InputProperties.LiskAddress)) {\n    for (const network of liskNetworks) {\n      out.push(makeLiskAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  if (properties.has(InputProperties.RiseAddress)) {\n    for (const network of riseNetworks) {\n      out.push(makeRiseAddressDisplay(normalizedInput, network));\n    }\n  }\n\n  out.sort((a, b) => a.priority - b.priority);\n\n  return out;\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { isInteractiveDisplay, processInput, StaticDisplay } from \"./inputprocessing\";\n\ninterface TestProps {\n  readonly location: any;\n  readonly history: any;\n  readonly match: any;\n}\n\ninterface TestState {\n  readonly input: string;\n  readonly display: ReadonlyArray<StaticDisplay>;\n}\n\nclass App extends React.Component<TestProps, TestState> {\n  // tslint:disable-next-line:readonly-array\n  private readonly timeouts: NodeJS.Timeout[] = [];\n\n  constructor(props: TestProps) {\n    super(props);\n    this.state = {\n      input: \"\",\n      display: [],\n    };\n\n    this.props.history.listen((location: any, action: any) => {\n      const hashQuery: string = location.hash.slice(1);\n      this.handleQuery(hashQuery);\n    });\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    const hashQuery: string = this.props.location.hash.slice(1);\n    const query = decodeURIComponent(hashQuery);\n    console.log(\"Initial query\", query);\n    this.handleQuery(query);\n  }\n\n  public render(): JSX.Element {\n    const listItems = this.state\n      ? this.state.display.map(display => {\n          return (\n            <div key={display.id} className={\"display \" + (display.deprecated ? \"deprecated\" : \"\")}>\n              <div className=\"content\">\n                <div className=\"display-title\">{display.interpretedAs}</div>\n                <div className=\"display-data\">{display.data}</div>\n              </div>\n            </div>\n          );\n        })\n      : [];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <input\n            className=\"maininput\"\n            type=\"text\"\n            placeholder=\"hex address, bech32 address, pubkey, mnemonic …\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            autoFocus\n          />\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <div className=\"pair\">\n              <div className=\"pair-key\">\n                <small>Direct link:&nbsp;</small>\n              </div>\n              <div className=\"pair-value\">\n                <input\n                  type=\"text\"\n                  className=\"direct-link\"\n                  readOnly={true}\n                  value={`${window.location.href.replace(/#.*/, \"\")}#${encodeURIComponent(\n                    this.state.input.trim(),\n                  )}`}\n                />\n              </div>\n            </div>\n          </div>\n        </header>\n        <section className=\"App-body\">\n          <div className={listItems.length === 0 ? \"hidden\" : \"display-container\"}>\n            <p className=\"description\">interpreted as</p>\n            {listItems}\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const newValue = e.target.value;\n    console.log(\"handle change called\", newValue);\n    this.handleQuery(newValue);\n  }\n\n  private updateDisplay(updatedDisplay: StaticDisplay): void {\n    const list = this.state.display.map(x => x);\n    const index = list.findIndex(i => i.id === updatedDisplay.id);\n    // tslint:disable-next-line:no-object-mutation\n    list[index] = updatedDisplay;\n    this.setState({\n      display: list,\n    });\n  }\n\n  private async handleQuery(newValue: string): Promise<void> {\n    const out = await processInput(newValue);\n\n    const allStatic = out.map(display => {\n      if (isInteractiveDisplay(display)) {\n        return {\n          id: display.id,\n          interpretedAs: display.interpretedAs,\n          priority: display.priority,\n          deprecated: display.deprecated,\n          data: <div>Loading ...</div>,\n        };\n      } else {\n        return display;\n      }\n    });\n\n    for (const timeout of this.timeouts) {\n      clearTimeout(timeout);\n    }\n\n    for (const interactiveDisplay of out.filter(isInteractiveDisplay)) {\n      const job = () => {\n        interactiveDisplay\n          .getData()\n          .then(data => {\n            const rendered = interactiveDisplay.renderData(data);\n            return rendered;\n          })\n          .catch(error => ({\n            id: interactiveDisplay.id,\n            interpretedAs: interactiveDisplay.interpretedAs,\n            priority: interactiveDisplay.priority,\n            deprecated: interactiveDisplay.deprecated,\n            data: <div className=\"error\">{error.toString()}</div>,\n          }))\n          .then(rendered => {\n            this.updateDisplay(rendered);\n          });\n      };\n\n      // delay execution\n      this.timeouts.push(setTimeout(job, 500));\n    }\n\n    this.setState({\n      input: newValue,\n      display: allStatic,\n    });\n  }\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}